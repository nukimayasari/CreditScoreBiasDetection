{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd25e42c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:35.210342Z",
     "iopub.status.busy": "2024-12-29T19:01:35.209965Z",
     "iopub.status.idle": "2024-12-29T19:01:36.081534Z",
     "shell.execute_reply": "2024-12-29T19:01:36.080441Z"
    },
    "papermill": {
     "duration": 0.884078,
     "end_time": "2024-12-29T19:01:36.084077",
     "exception": false,
     "start_time": "2024-12-29T19:01:35.199999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/credit-score-classification-dataset/Credit Score Classification Dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "034d77da",
   "metadata": {
    "papermill": {
     "duration": 0.007397,
     "end_time": "2024-12-29T19:01:36.099741",
     "exception": false,
     "start_time": "2024-12-29T19:01:36.092344",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Bias Detection and Mitigation on Credit Score Dataset**\n",
    "\n",
    "Welcome to this Kaggle Notebook, where we aim to explore and learn about AI fairness through the lens of a credit score dataset. In this notebook, we will focus on detecting and mitigating biases present in the dataset, specifically looking at the 'Gender' and 'Marital Status' columns.\n",
    "\n",
    "The primary objective of this analysis is to evaluate the accuracy of our models using the F1 score, not only on the overall dataset but also by comparing the performance across different groups defined by the 'Gender' and 'Marital Status' attributes. By doing so, we aim to uncover any disparities that may exist in the model's predictions.\n",
    "\n",
    "To address any identified biases, we will implement several techniques for bias mitigation:\n",
    "1. **Synthetic Minority Over-sampling Technique (SMOTE)**: A method to address class imbalance by generating synthetic samples.\n",
    "2. **Reweighting**: Adjusting the weights of different groups to balance the influence each group has on the training process.\n",
    "3. **Learning Fair Representations (LFR)**: Transforming the dataset into a new representation that aims to remove bias while maintaining predictive performance.\n",
    "\n",
    "All the code in this notebook has been developed with the assistance of ChatGPT, a large language model (LLM), ensuring that the implementation is robust and efficient.\n",
    "\n",
    "Let's dive in and work towards creating a fairer and more equitable AI model!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4461cb20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:36.118579Z",
     "iopub.status.busy": "2024-12-29T19:01:36.117222Z",
     "iopub.status.idle": "2024-12-29T19:01:36.194473Z",
     "shell.execute_reply": "2024-12-29T19:01:36.193427Z"
    },
    "papermill": {
     "duration": 0.089632,
     "end_time": "2024-12-29T19:01:36.197013",
     "exception": false,
     "start_time": "2024-12-29T19:01:36.107381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Income</th>\n",
       "      <th>Education</th>\n",
       "      <th>Marital Status</th>\n",
       "      <th>Number of Children</th>\n",
       "      <th>Home Ownership</th>\n",
       "      <th>Credit Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Female</td>\n",
       "      <td>50000</td>\n",
       "      <td>Bachelor's Degree</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Rented</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Male</td>\n",
       "      <td>100000</td>\n",
       "      <td>Master's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>2</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Female</td>\n",
       "      <td>75000</td>\n",
       "      <td>Doctorate</td>\n",
       "      <td>Married</td>\n",
       "      <td>1</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Male</td>\n",
       "      <td>125000</td>\n",
       "      <td>High School Diploma</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Female</td>\n",
       "      <td>100000</td>\n",
       "      <td>Bachelor's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>3</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Male</td>\n",
       "      <td>150000</td>\n",
       "      <td>Master's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Female</td>\n",
       "      <td>40000</td>\n",
       "      <td>Associate's Degree</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Rented</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Male</td>\n",
       "      <td>60000</td>\n",
       "      <td>Bachelor's Degree</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Rented</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Female</td>\n",
       "      <td>80000</td>\n",
       "      <td>Master's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>2</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Male</td>\n",
       "      <td>105000</td>\n",
       "      <td>Doctorate</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Income            Education Marital Status  Number of Children  \\\n",
       "Age                                                                           \n",
       "25   Female   50000    Bachelor's Degree         Single                   0   \n",
       "30     Male  100000      Master's Degree        Married                   2   \n",
       "35   Female   75000            Doctorate        Married                   1   \n",
       "40     Male  125000  High School Diploma         Single                   0   \n",
       "45   Female  100000    Bachelor's Degree        Married                   3   \n",
       "50     Male  150000      Master's Degree        Married                   0   \n",
       "26   Female   40000   Associate's Degree         Single                   0   \n",
       "31     Male   60000    Bachelor's Degree         Single                   0   \n",
       "36   Female   80000      Master's Degree        Married                   2   \n",
       "41     Male  105000            Doctorate         Single                   0   \n",
       "\n",
       "    Home Ownership Credit Score  \n",
       "Age                              \n",
       "25          Rented         High  \n",
       "30           Owned         High  \n",
       "35           Owned         High  \n",
       "40           Owned         High  \n",
       "45           Owned         High  \n",
       "50           Owned         High  \n",
       "26          Rented      Average  \n",
       "31          Rented      Average  \n",
       "36           Owned         High  \n",
       "41           Owned         High  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Income</th>\n",
       "      <td>164.0</td>\n",
       "      <td>83765.243902</td>\n",
       "      <td>32457.306728</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>57500.0</td>\n",
       "      <td>83750.0</td>\n",
       "      <td>105000.0</td>\n",
       "      <td>162500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of Children</th>\n",
       "      <td>164.0</td>\n",
       "      <td>0.652439</td>\n",
       "      <td>0.883346</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    count          mean           std      min      25%  \\\n",
       "Income              164.0  83765.243902  32457.306728  25000.0  57500.0   \n",
       "Number of Children  164.0      0.652439      0.883346      0.0      0.0   \n",
       "\n",
       "                        50%       75%       max  \n",
       "Income              83750.0  105000.0  162500.0  \n",
       "Number of Children      0.0       1.0       3.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 164 entries, 25 to 49\n",
      "Data columns (total 7 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   Gender              164 non-null    object\n",
      " 1   Income              164 non-null    int64 \n",
      " 2   Education           164 non-null    object\n",
      " 3   Marital Status      164 non-null    object\n",
      " 4   Number of Children  164 non-null    int64 \n",
      " 5   Home Ownership      164 non-null    object\n",
      " 6   Credit Score        164 non-null    object\n",
      "dtypes: int64(2), object(5)\n",
      "memory usage: 10.2+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(164, 7)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/credit-score-classification-dataset/Credit Score Classification Dataset.csv\", index_col = 0)\n",
    "\n",
    "display(df.head(10))\n",
    "display(df.describe().T)\n",
    "display(df.info())\n",
    "display(df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b76f7a9",
   "metadata": {
    "papermill": {
     "duration": 0.007986,
     "end_time": "2024-12-29T19:01:36.214209",
     "exception": false,
     "start_time": "2024-12-29T19:01:36.206223",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Class Distribution Analysis\n",
    "\n",
    "After loading and inspecting our dataset, we now turn our attention to understanding the distribution of the 'Credit Score' classes within the dataset. This step is crucial as it provides insights into the balance of our data, which in turn affects the performance of our machine learning models.\n",
    "\n",
    "We visualize the class distribution using a count plot, which shows the frequency of each 'Credit Score' category. The resulting plot reveals the following counts for each class:\n",
    "- **High**: 113 instances\n",
    "- **Average**: 36 instances\n",
    "- **Low**: 15 instances\n",
    "\n",
    "From these numbers, it is evident that the majority of our dataset is classified as having a \"High\" credit score, while the \"Low\" credit score category is underrepresented. This class imbalance can introduce bias into our models, leading them to favor the majority class. Therefore, it is essential to address this imbalance during our bias detection and mitigation process.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9033e254",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:36.232437Z",
     "iopub.status.busy": "2024-12-29T19:01:36.232085Z",
     "iopub.status.idle": "2024-12-29T19:01:38.057476Z",
     "shell.execute_reply": "2024-12-29T19:01:38.056481Z"
    },
    "papermill": {
     "duration": 1.837094,
     "end_time": "2024-12-29T19:01:38.059564",
     "exception": false,
     "start_time": "2024-12-29T19:01:36.222470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Credit Score\n",
      "High       113\n",
      "Average     36\n",
      "Low         15\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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r2rXrq0vv/xSw4cP1x9//JFtZuTbb7/V0qVL9cQTT8jb21tTp05Vx44ddfjwYZUsWTLXuv766y81a9ZM+/fv16BBgxQWFqaPP/5YvXr1UnJysp588klVq1ZN7777roYOHapy5crpqaeekiSVLl06xzFXrlypixcvXvWanst16tRJ4eHhmjRpkowxkv4+/qNHj1bnzp3Vr18/nThxQtOmTVOTJk30448/ys/PT5I0b948PfbYY2rYsKFiYmL022+/6cEHH5S/v79CQkJy3edjjz2mY8eO6auvvtK777571RpDQ0MlSR9//LE6deqk2267Lde+aWlpaty4seLj49WnTx/VqVNHf/75pz755BMdPXpUpUqVuqbj/0/z589Xenq6BgwYILvdLn9/f+3evVuRkZEqW7asRo4cKU9PT3300Udq3769lixZooceeuiq7wu3uMJOW0B+paSkGEmmXbt217zN5TMN6enpJjMz06nPwYMHjd1uN+PHj3e0tWvXztxxxx1XHNvX19dER0dfcy2XXG1m59LYd911l2P58pmdKVOmGElOfxVfbtu2bU5/uf9T06ZNjSQza9asHNflNLNTtmxZk5qa6mj/6KOPjCTz5ptvOtquZWbnarVdPrOzfPlyI8lMmDDBqd/DDz9sbDab2b9/v6NNknF3d3dq27lzp5Fkpk2blm1f/xQbG2skmf/+97+OtgsXLpiIiAjj5eXl9N5DQ0NNmzZtrjieMcYMHTrUSHLMOlzNpZ9zt27dnNoPHTpkXFxczMSJE53af/rpJ+Pq6upov3DhgilTpoypXbu2OX/+vKPfnDlzjKQrzuwYY0x0dPQVZ3Mu16NHDyPJlChRwjz00EPmtddeM/Hx8dn6jRkzxkgyS5cuzbbu0uzctR7/S3X7+PiYpKQkp7FatmxpatasadLT053Gb9iwoQkPD7/m94VbF3dj4ZaXmpoqSfL29s7zGHa7XcWK/f3PITMzUydPnpSXl5eqVKmiH374wdHPz89PR48e1bZt23Idy8/PT1u2bNGxY8fyXE9uvLy8rnhX1qW/4lesWJHni3ntdrt69+59zf179OjhdOwffvhhBQUF6YsvvsjT/q/VF198IRcXFw0ZMsSp/amnnpIxRitXrnRqj4qKUsWKFR3Ld955p3x8fPTbb79ddT+BgYHq1q2bo83NzU1DhgxRWlqa4uLirrv2vH5mBw4c6LS8dOlSZWVlqXPnzvrzzz8dr8DAQIWHh2vdunWSpO+//15JSUkaOHCg0/UrvXr1kq+v73XXfzXz58/XW2+9pbCwMC1btkxPP/20qlWrppYtW+qPP/5w9FuyZIlq1aqV48zKpUcqXO/x79ixo9OM2qlTp7R27Vp17txZZ86ccRyjkydPqlWrVtq3b59TTbAmwg5ueT4+PpKUr1uzs7KyNGXKFIWHh8tut6tUqVIqXbq0du3apZSUFEe/ESNGyMvLS/Xr11d4eLiio6Mdp4gueeWVV/Tzzz8rJCRE9evX1wsvvHDVX6jXKi0t7Yq/ILt06aLIyEj169dPAQEB6tq1qz766KPrCj5ly5a9rgs6w8PDnZZtNpsqVaqkQ4cOXfMYefH7778rODg42/GoVq2aY/0/3X777dnGKFGihE6fPn3V/YSHhzvC8NX2cy3y+pkNCwtzWt63b5+MMQoPD1fp0qWdXvHx8UpKSnKq8fKflZubmypUqHDd9V9NsWLFFB0dre3bt+vPP//UihUr1Lp1a61du1Zdu3Z19Dtw4IBq1KhxxbGu9/hffoz2798vY4xGjx6d7Rhdumvu0nGCdXHNDm55Pj4+Cg4O1s8//5znMSZNmqTRo0erT58+evHFF+Xv769ixYopJibGKShUq1ZNe/bs0WeffaZVq1ZpyZIlmjFjhsaMGaNx48ZJkjp37qzGjRtr2bJlWr16tV599VW9/PLLWrp0qVq3bp3nGo8ePaqUlBRVqlQp1z4eHh7asGGD1q1bp88//1yrVq3Shx9+qBYtWmj16tVycXG56n6u5zqba5Xbgw8zMzOvqaaCkNt+zP9d+3IzVa1aVZL0008/Xdft/5f/bLKysmSz2bRy5coc35+Xl1e+6iwIJUuW1IMPPqgHH3xQzZo1U1xcnH7//XfHtT0FLadjJElPP/20WrVqleM2V/o3BWsg7MASHnjgAc2ZM0ebNm1SRETEdW+/ePFiNW/eXPPmzXNqT05OVqlSpZzaPD091aVLF3Xp0kUXLlxQhw4dNHHiRI0aNcpxy25QUJCeeOIJPfHEE0pKSlKdOnU0ceLEfIWdSxeH5vY/7EuKFSumli1bqmXLlnrjjTc0adIkPffcc1q3bp2ioqIK/InL+/btc1o2xmj//v1OzwMqUaKEkpOTs237+++/O80sXE9toaGh+vrrr3XmzBmn2Z1ff/3Vsb4ghIaGateuXcrKynKaXcjPflq3bi0XFxf997//ve6LlP+pYsWKMsYoLCxMlStXzrXfpRr37dunFi1aONozMjJ08OBB1apV64r7KajPTL169RQXF6fjx48rNDRUFStWvOofKfk9/pc+X25uboqKisrnO8CtitNYsIRnnnlGnp6e6tevnxITE7OtP3DggN58881ct3dxccn2F/7HH3+c7Vz+yZMnnZbd3d1VvXp1GWOUkZGhzMxMp9NeklSmTBkFBwfr/Pnz1/u2HNauXasXX3xRYWFh6t69e679Tp06la3t0szBpf1fejZLTuEjLxYuXOh0Ombx4sU6fvy4U7CrWLGiNm/erAsXLjjaPvvsMx05csRprOup7f7771dmZqbeeustp/YpU6bIZrPlK1hevp+EhAR9+OGHjraLFy9q2rRp8vLyUtOmTa97zJCQEPXv31+rV6/WtGnTsq3PysrS66+/rqNHj15xnA4dOsjFxUXjxo3L9vk1xjg+r/Xq1VPp0qU1a9Ysp5/BggULrulYX8/PJSEhQb/88ku29gsXLmjNmjUqVqyYYyalY8eO2rlzp5YtW5at/6X3k9/jX6ZMGTVr1kyzZ8/W8ePHs62/mc/9QeFhZgeWULFiRb333nvq0qWLqlWr5vQE5e+++85xq2puHnjgAY0fP169e/dWw4YN9dNPP2nRokXZrmf417/+pcDAQEVGRiogIEDx8fF666231KZNG3l7eys5OVnlypXTww8/rFq1asnLy0tff/21tm3bptdff/2a3svKlSv166+/6uLFi0pMTNTatWv11VdfKTQ0VJ988skVH/g2fvx4bdiwQW3atFFoaKiSkpI0Y8YMlStXTo0aNXIcKz8/P82aNUve3t7y9PRUgwYNsl3rcK38/f3VqFEj9e7dW4mJiYqNjVWlSpWcbo/v16+fFi9erPvuu0+dO3fWgQMH9N///tfpguHrra1t27Zq3ry5nnvuOR06dEi1atXS6tWrtWLFCsXExGQbO68GDBig2bNnq1evXtq+fbvKly+vxYsXa+PGjYqNjc3zhfGvv/66Dhw4oCFDhmjp0qV64IEHVKJECR0+fFgff/yxfv31V6frW3JSsWJFTZgwQaNGjdKhQ4fUvn17eXt76+DBg1q2bJkGDBigp59+Wm5ubpowYYIee+wxtWjRQl26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PvhAzz//vCQpKipKlStXVs+ePbVz50598803eu655644ZmhoqGw2mz777DOdOHFCaWlpOfZ7/PHH9eKLL2rjxo36/ffftXnzZvXo0UOlS5d21P3CCy/o9ddf19SpU7Vv3z798MMPmjZtmqO2mjVrqnv37vrhhx+0detW9ejRQ02bNr3irFBUVJQiIiLUvn17rV69WocOHdJ3332n5557Tt9///0V3xuAfCjsi4YA3NqOHTtmoqOjTWhoqHF3dzdly5Y1Dz74oFm3bp2jj/5xUfE/rVq1yjRs2NB4eHgYHx8fU79+fTNnzhzH+j179phGjRoZd3d3U7lyZbNq1aorXqBsjDHjx483gYGBxmaz5Xrr+eLFi839999vgoKCjLu7uwkODjYdO3Y0u3btcuo3a9YsU6VKFePm5maCgoLM4MGDHeuu9dbzy6WmpprBgweb4OBg4+bmZkJCQkz37t2dLnYGULBsxlznVYYAAAC3EE5jAQAASyPsAAAASyPsAAAASyPsAAAASyPsAAAASyPsAAAASyPsAAAASyPsAAAASyPsAAAASyPsAAAASyPsAAAASyPsAAAAS/t/5uOF0SsiezgAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Class distribution\n",
    "sns.countplot(x='Credit Score', data=df)\n",
    "plt.title(\"Class Distribution of Credit Score\")\n",
    "plt.show\n",
    "\n",
    "df_credit = df['Credit Score'].value_counts()\n",
    "print(df_credit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b9eef5c",
   "metadata": {
    "papermill": {
     "duration": 0.008946,
     "end_time": "2024-12-29T19:01:38.077890",
     "exception": false,
     "start_time": "2024-12-29T19:01:38.068944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing and Model Evaluation\n",
    "\n",
    "To prepare our dataset for bias detection and mitigation, we undergo a series of preprocessing steps and model evaluation processes.\n",
    "\n",
    "**Step 1: Encode Categorical Features**\n",
    "\n",
    "First, we encode the categorical features in our dataset. This includes columns such as 'Gender', 'Education', 'Marital Status', and 'Home Ownership', along with our target variable 'Credit Score'. We use `LabelEncoder` to convert these categorical features into numerical values, making them suitable for our machine learning models.\n",
    "\n",
    "**Step 2: Define Features and Target Variable**\n",
    "\n",
    "Next, we define our features (X) by dropping the 'Credit Score' column from the dataset, and our target variable (y) as the 'Credit Score' column itself.\n",
    "\n",
    "**Step 3: Apply SMOTE**\n",
    "\n",
    "Given the skewed nature of our class distribution, we apply the Synthetic Minority Over-sampling Technique (SMOTE) to balance the classes. This step helps mitigate the bias introduced by the imbalanced dataset by generating synthetic samples for the minority classes.\n",
    "\n",
    "**Step 4: Standardize Features**\n",
    "\n",
    "After applying SMOTE, we standardize the features using StandardScaler to ensure that each feature contributes equally to the model.\n",
    "\n",
    "**Step 5: K-Fold Cross-Validation**\n",
    "\n",
    "We then proceed with model evaluation using K-Fold Cross-Validation. This technique splits the data into five folds and trains the model on different subsets of the data to obtain a robust estimate of the model's performance. We use a RandomForestClassifier as our example model.\n",
    "\n",
    "The cross-validation results are as follows:\n",
    "\n",
    "* **Cross-Validation Accuracy Scores**: [1.00000000, 0.98529412, 0.95588235, 0.97058824, 0.98507463]\n",
    "\n",
    "* **Mean Accuracy**: 0.979367866549605\n",
    "\n",
    "These results indicate that our model performs well across different subsets of the data, showcasing the effectiveness of our preprocessing steps and the model's ability to generalize.assert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc856f30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:38.097197Z",
     "iopub.status.busy": "2024-12-29T19:01:38.096542Z",
     "iopub.status.idle": "2024-12-29T19:01:39.519093Z",
     "shell.execute_reply": "2024-12-29T19:01:39.517760Z"
    },
    "papermill": {
     "duration": 1.434662,
     "end_time": "2024-12-29T19:01:39.521261",
     "exception": false,
     "start_time": "2024-12-29T19:01:38.086599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Gender  Income  Education  Marital Status  Number of Children  \\\n",
      "Age                                                                  \n",
      "25        0   50000          1               1                   0   \n",
      "30        1  100000          4               0                   2   \n",
      "35        0   75000          2               0                   1   \n",
      "40        1  125000          3               1                   0   \n",
      "45        0  100000          1               0                   3   \n",
      "\n",
      "     Home Ownership  \n",
      "Age                  \n",
      "25                1  \n",
      "30                0  \n",
      "35                0  \n",
      "40                0  \n",
      "45                0  \n",
      "Cross-Validation Accuracy Scores: [1.         0.98529412 0.95588235 0.97058824 0.98507463]\n",
      "Mean Accuracy: 0.979367866549605\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.model_selection import KFold, cross_val_score\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import f1_score, confusion_matrix, accuracy_score\n",
    "\n",
    "# Step 1: Encode categorical features\n",
    "categorical_cols = ['Gender', 'Education', 'Marital Status', 'Home Ownership', 'Credit Score']\n",
    "label_encoders = {}\n",
    "for col in categorical_cols:\n",
    "    le = LabelEncoder()\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "    label_encoders[col] = le  # Save encoders for reverse mapping later\n",
    "\n",
    "# Step 2: Features and target\n",
    "X = df.drop(columns=['Credit Score'])  # Features\n",
    "y = df['Credit Score']  # Target variable\n",
    "\n",
    "print(X.head())\n",
    "\n",
    "# Step 3: Apply SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "X_smote, y_smote = smote.fit_resample(X, y)\n",
    "\n",
    "# Step 4: Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_smote_scaled = scaler.fit_transform(X_smote)\n",
    "\n",
    "# Step 5: K-Fold Cross-Validation\n",
    "kf = KFold(n_splits=5, shuffle=True, random_state=42)  # 5 folds\n",
    "model = RandomForestClassifier(random_state=42)  # Example model\n",
    "\n",
    "# Perform cross-validation\n",
    "cv_scores = cross_val_score(model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "\n",
    "# Output results\n",
    "print(\"Cross-Validation Accuracy Scores:\", cv_scores)\n",
    "print(\"Mean Accuracy:\", cv_scores.mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "279e9550",
   "metadata": {
    "papermill": {
     "duration": 0.008407,
     "end_time": "2024-12-29T19:01:39.538575",
     "exception": false,
     "start_time": "2024-12-29T19:01:39.530168",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Comparison and AI Fairness\n",
    "\n",
    "To evaluate our approach to bias mitigation, we compare the performance of different models using K-Fold Cross-Validation. \n",
    "\n",
    "We start with a baseline model using `DummyClassifier`, which always predicts the most frequent class. This serves as a benchmark to measure the effectiveness of our more sophisticated models.\n",
    "\n",
    "* **Baseline Accuracy Scores**: [0.25, 0.32352941, 0.25, 0.32352941, 0.28358209]\n",
    "* **Mean Baseline Accuracy**: 0.2861281826163301\n",
    "\n",
    "Then, we perform Logistic Regression, with scores:\n",
    "* **Logistic Regression Accuracy Scores**: [1.00, 1.00, 0.95588235, 0.98529412, 0.97014925]\n",
    "* **Mean Logistic Regression Accuracy**: 0.9822651448639158\n",
    "\n",
    "The final model we are using on this section is XGBClassifier, with scores:\n",
    "* **XGBClassifier Accuracy Scores**: [1.00, 0.97058824, 0.98529412, 0.94117647, 1.00]\n",
    "* **Mean XGBClassifier Accuracy**: 0.9794117647058824\n",
    "\n",
    "These results highlight that both Logistic Regression and XGBClassifier significantly outperform the baseline model, indicating that our preprocessing and bias mitigation steps are effective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2c940d6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:39.557906Z",
     "iopub.status.busy": "2024-12-29T19:01:39.557336Z",
     "iopub.status.idle": "2024-12-29T19:01:40.126086Z",
     "shell.execute_reply": "2024-12-29T19:01:40.125255Z"
    },
    "papermill": {
     "duration": 0.583122,
     "end_time": "2024-12-29T19:01:40.130337",
     "exception": false,
     "start_time": "2024-12-29T19:01:39.547215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline Accuracy Scores: [0.25       0.32352941 0.25       0.32352941 0.28358209]\n",
      "Mean Baseline Accuracy: 0.2861281826163301\n",
      "\n",
      "Logistic Regression Accuracy Scores: [1.         1.         0.95588235 0.98529412 0.97014925]\n",
      "Mean Logistic Regression Accuracy: 0.9822651448639158\n",
      "\n",
      "XGBClassifier Accuracy Scores: [1.         0.97058824 0.98529412 0.94117647 1.        ]\n",
      "Mean XGBClassifier Accuracy: 0.9794117647058824\n"
     ]
    }
   ],
   "source": [
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Step 1: Baseline Model\n",
    "baseline_model = DummyClassifier(strategy='most_frequent')  # Always predicts majority class\n",
    "baseline_scores = cross_val_score(baseline_model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Baseline Accuracy Scores:\", baseline_scores)\n",
    "print(\"Mean Baseline Accuracy:\", baseline_scores.mean())\n",
    "\n",
    "# Step 2: Logistic Regression Model\n",
    "logreg_model = LogisticRegression(random_state=42, max_iter=1000)\n",
    "logreg_scores = cross_val_score(logreg_model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "print(\"\\nLogistic Regression Accuracy Scores:\", logreg_scores)\n",
    "print(\"Mean Logistic Regression Accuracy:\", logreg_scores.mean())\n",
    "\n",
    "# Step 3: XGBClassifier Model\n",
    "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
    "xgb_scores = cross_val_score(xgb_model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "print(\"\\nXGBClassifier Accuracy Scores:\", xgb_scores)\n",
    "print(\"Mean XGBClassifier Accuracy:\", xgb_scores.mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27fca6c7",
   "metadata": {
    "papermill": {
     "duration": 0.012523,
     "end_time": "2024-12-29T19:01:40.154895",
     "exception": false,
     "start_time": "2024-12-29T19:01:40.142372",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Before diving into AI fairness analysis, we examine the class distribution for the 'Gender' column. This helps us understand the representation of different groups in our dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b7b4a242",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:40.178477Z",
     "iopub.status.busy": "2024-12-29T19:01:40.177566Z",
     "iopub.status.idle": "2024-12-29T19:01:40.184838Z",
     "shell.execute_reply": "2024-12-29T19:01:40.183660Z"
    },
    "papermill": {
     "duration": 0.021559,
     "end_time": "2024-12-29T19:01:40.186758",
     "exception": false,
     "start_time": "2024-12-29T19:01:40.165199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender\n",
      "0    86\n",
      "1    78\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of the 'Gender' column\n",
    "gender_counts = df['Gender'].value_counts()\n",
    "print(gender_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1e78f6d",
   "metadata": {
    "papermill": {
     "duration": 0.009537,
     "end_time": "2024-12-29T19:01:40.205437",
     "exception": false,
     "start_time": "2024-12-29T19:01:40.195900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Gender-Based Model Performance Evaluation using Cross-Validation\n",
    "\n",
    "In our pursuit of AI fairness, we take the critical step of evaluating the model's performance separately for male and female groups. This analysis helps us identify any discrepancies in model accuracy across different gender categories and ensures our model is equitable.\n",
    "\n",
    "**Step 1: Split the Data by Gender**\n",
    "First, we split the dataset into two groups based on the 'Gender' column: one for males and one for females.\n",
    "\n",
    "**Step 2: Define Features and Target Variable for Each Group**\n",
    "For each gender group, we separate the features (X) and the target variable (y).\n",
    "\n",
    "**Step 3: Apply SMOTE to Balance the Data**\n",
    "To address any class imbalances within each gender group, we apply SMOTE to create balanced datasets.\n",
    "\n",
    "**Step 4: Standardize Features**\n",
    "We standardize the features for each gender group to ensure consistency in model training.\n",
    "\n",
    "**Step 5: Evaluate Model Performance Using Cross-Validation**\n",
    "We perform cross-validation to evaluate the model's performance for each gender group. This helps us compare the accuracy scores across the different groups."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ae47da80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:40.229525Z",
     "iopub.status.busy": "2024-12-29T19:01:40.228559Z",
     "iopub.status.idle": "2024-12-29T19:01:40.263250Z",
     "shell.execute_reply": "2024-12-29T19:01:40.262083Z"
    },
    "papermill": {
     "duration": 0.049518,
     "end_time": "2024-12-29T19:01:40.266066",
     "exception": false,
     "start_time": "2024-12-29T19:01:40.216548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split the data by gender and evaluate performance separately\n",
    "df_male = df[df['Gender'] == 1]  # '0' corresponds to male\n",
    "df_female = df[df['Gender'] == 0]  # '1' corresponds to female\n",
    "\n",
    "# Evaluate performance for each group\n",
    "X_male = df_male.drop(columns=['Credit Score', 'Gender'])\n",
    "y_male = df_male['Credit Score']\n",
    "\n",
    "X_female = df_female.drop(columns=['Credit Score', 'Gender'])\n",
    "y_female = df_female['Credit Score']\n",
    "\n",
    "# Apply SMOTE to balance the data for each gender group\n",
    "X_male_smote, y_male_smote = smote.fit_resample(X_male, y_male)\n",
    "X_female_smote, y_female_smote = smote.fit_resample(X_female, y_female)\n",
    "\n",
    "# Standardize features\n",
    "X_male_smote_scaled = scaler.fit_transform(X_male_smote)\n",
    "X_female_smote_scaled = scaler.fit_transform(X_female_smote)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48901f06",
   "metadata": {
    "papermill": {
     "duration": 0.013,
     "end_time": "2024-12-29T19:01:40.289607",
     "exception": false,
     "start_time": "2024-12-29T19:01:40.276607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### **Results `RandomForestClassifier`:**\n",
    "* **Male Group Accuracy Scores**: [1.00, 1.00, 1.00, 1.00, 1.00]\n",
    "* **Mean Male Group Accuracy**: 1.0\n",
    "* **Female Group Accuracy Scores**: [1.00, 1.00, 0.94117647, 0.93939394, 0.96969697]\n",
    "* **Mean Female Group Accuracy**: 0.9700534759358289\n",
    "\n",
    "#### **Results `LogisticRegression`:**\n",
    "* **Male Group Accuracy Scores**: [1.         0.95652174 1.         0.91304348 1.        ]\n",
    "* **Mean Male Group Accuracy**: 0.9739130434782609\n",
    "* **Female Group Accuracy Scores**: [1.         0.97058824 0.94117647 0.93939394 1.        ]\n",
    "* **Mean Female Group Accuracy**: 0.9702317290552586\n",
    "\n",
    "Although the differences in mean accuracy between the male and female groups are not extremely large, we do observe a slight disparity. The model achieves perfect accuracy for the male group, while the female group's accuracy is slightly lower. This indicates a potential bias in favor of the male category, which highlights the importance of addressing and mitigating such biases to ensure fairness in AI models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "26bd2694",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:40.310027Z",
     "iopub.status.busy": "2024-12-29T19:01:40.309624Z",
     "iopub.status.idle": "2024-12-29T19:01:41.862741Z",
     "shell.execute_reply": "2024-12-29T19:01:41.861566Z"
    },
    "papermill": {
     "duration": 1.565671,
     "end_time": "2024-12-29T19:01:41.865004",
     "exception": false,
     "start_time": "2024-12-29T19:01:40.299333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Male Group Accuracy Scores: [1. 1. 1. 1. 1.]\n",
      "Mean Male Group Accuracy: 1.0\n",
      "Female Group Accuracy Scores: [1.         1.         0.94117647 0.93939394 0.96969697]\n",
      "Mean Female Group Accuracy: 0.9700534759358289\n",
      "Male Group Accuracy Scores: [1.         0.95652174 1.         0.91304348 1.        ]\n",
      "Mean Male Group Accuracy: 0.9739130434782609\n",
      "Female Group Accuracy Scores: [1.         0.97058824 0.94117647 0.93939394 1.        ]\n",
      "Mean Female Group Accuracy: 0.9702317290552586\n"
     ]
    }
   ],
   "source": [
    "# Cross-validation for male group - RandomForestClassifier model\n",
    "male_scores = cross_val_score(model, X_male_smote_scaled, y_male_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Male Group Accuracy Scores:\", male_scores)\n",
    "print(\"Mean Male Group Accuracy:\", male_scores.mean())\n",
    "\n",
    "# Cross-validation for female group - RandomForestClassifier model\n",
    "female_scores = cross_val_score(model, X_female_smote_scaled, y_female_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Female Group Accuracy Scores:\", female_scores)\n",
    "print(\"Mean Female Group Accuracy:\", female_scores.mean())\n",
    "\n",
    "#-----------------------------------------------------------------------------\n",
    "# Cross-validation for male group - LogisticRegression model\n",
    "male_scores = cross_val_score(logreg_model, X_male_smote_scaled, y_male_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Male Group Accuracy Scores:\", male_scores)\n",
    "print(\"Mean Male Group Accuracy:\", male_scores.mean())\n",
    "\n",
    "# Cross-validation for female group - LogisticRegression model\n",
    "female_scores = cross_val_score(logreg_model, X_female_smote_scaled, y_female_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Female Group Accuracy Scores:\", female_scores)\n",
    "print(\"Mean Female Group Accuracy:\", female_scores.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29ba81d9",
   "metadata": {
    "papermill": {
     "duration": 0.008919,
     "end_time": "2024-12-29T19:01:41.883191",
     "exception": false,
     "start_time": "2024-12-29T19:01:41.874272",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Gender-Based Model Performance Evaluation using F1 Score, Accuracy, & Confusion Matrix\n",
    "\n",
    "To thoroughly assess our models, we implement a function to evaluate key metrics, including accuracy, F1-score, and the confusion matrix. These metrics provide a comprehensive understanding of model performance across different groups.\n",
    "\n",
    "**Step 1: Define the Evaluation Function**\n",
    "We create a function `evaluate_model_metrics` to fit the model to the given data and calculate the accuracy, F1-score, and confusion matrix. This function ensures that `y` is a 1D array, converting one-hot encoded labels to class labels if necessary.\n",
    "\n",
    "**Step 2: Evaluate Metrics for Male Group**\n",
    "Using the evaluate_model_metrics function, we assess the performance of the `RandomForestClassifier` and `LogisticRegression` model for both male and female group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "56b8551f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:41.903178Z",
     "iopub.status.busy": "2024-12-29T19:01:41.902758Z",
     "iopub.status.idle": "2024-12-29T19:01:42.096451Z",
     "shell.execute_reply": "2024-12-29T19:01:42.095319Z"
    },
    "papermill": {
     "duration": 0.206221,
     "end_time": "2024-12-29T19:01:42.098511",
     "exception": false,
     "start_time": "2024-12-29T19:01:41.892290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Male Group Accuracy Random Forest Classifier Model: 1.0, F1-Score: 1.0\n",
      "Confusion Matrix for Male Group Random Forest Classifier Model:\n",
      " [[57  0]\n",
      " [ 0 57]]\n",
      "Female Group Accuracy Random Forest Classifier Model: 0.9761904761904762, F1-Score: 0.9761828814460394\n",
      "Confusion Matrix for Female Group Random Forest Classifier Model:\n",
      " [[53  3  0]\n",
      " [ 1 55  0]\n",
      " [ 0  0 56]]\n",
      "Male Group Accuracy Logistic Regression Model: 0.9912280701754386, F1-Score: 0.9912273951519815\n",
      "Confusion Matrix for Male Group Logistic Regression Model:\n",
      " [[57  0]\n",
      " [ 1 56]]\n",
      "Female Group Accuracy Logistic Regression Model: 0.9761904761904762, F1-Score: 0.9761828814460394\n",
      "Confusion Matrix for Female Group Logistic Regression Model:\n",
      " [[53  3  0]\n",
      " [ 1 55  0]\n",
      " [ 0  0 56]]\n"
     ]
    }
   ],
   "source": [
    "# Function to evaluate model metrics including F1-score\n",
    "def evaluate_model_metrics(X, y, model):\n",
    "    # Ensure y is a 1D array, in case it's one-hot encoded or in other format\n",
    "    if y.ndim > 1:\n",
    "        y = np.argmax(y, axis=1)  # Convert one-hot to class labels\n",
    "    \n",
    "    model.fit(X, y)  # Fit the model to the given data\n",
    "    y_pred = model.predict(X)\n",
    "    \n",
    "    accuracy = accuracy_score(y, y_pred)\n",
    "    f1 = f1_score(y, y_pred, average='weighted')\n",
    "    conf_matrix = confusion_matrix(y, y_pred)\n",
    "    \n",
    "    return accuracy, f1, conf_matrix\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Evaluate metrics for the male group - model(RandomForestClassifier)\n",
    "accuracy_male, f1_male, conf_matrix_male = evaluate_model_metrics(X_male_smote_scaled, y_male_smote, model)\n",
    "print(f\"Male Group Accuracy Random Forest Classifier Model: {accuracy_male}, F1-Score: {f1_male}\")\n",
    "print(\"Confusion Matrix for Male Group Random Forest Classifier Model:\\n\", conf_matrix_male)\n",
    "\n",
    "# Evaluate metrics for the female group - logreg_model\n",
    "accuracy_female, f1_female, conf_matrix_female = evaluate_model_metrics(X_female_smote_scaled, y_female_smote, logreg_model)\n",
    "print(f\"Female Group Accuracy Random Forest Classifier Model: {accuracy_female}, F1-Score: {f1_female}\")\n",
    "print(\"Confusion Matrix for Female Group Random Forest Classifier Model:\\n\", conf_matrix_female)\n",
    "\n",
    "#------------------------------------------------------------------------------\n",
    "# Evaluate metrics for the male group - logreg_model\n",
    "accuracy_male, f1_male, conf_matrix_male = evaluate_model_metrics(X_male_smote_scaled, y_male_smote, logreg_model)\n",
    "print(f\"Male Group Accuracy Logistic Regression Model: {accuracy_male}, F1-Score: {f1_male}\")\n",
    "print(\"Confusion Matrix for Male Group Logistic Regression Model:\\n\", conf_matrix_male)\n",
    "\n",
    "# Evaluate metrics for the female group - logreg_model\n",
    "accuracy_female, f1_female, conf_matrix_female = evaluate_model_metrics(X_female_smote_scaled, y_female_smote, logreg_model)\n",
    "print(f\"Female Group Accuracy Logistic Regression Model: {accuracy_female}, F1-Score: {f1_female}\")\n",
    "print(\"Confusion Matrix for Female Group Logistic Regression Model:\\n\", conf_matrix_female)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d387889",
   "metadata": {
    "papermill": {
     "duration": 0.00886,
     "end_time": "2024-12-29T19:01:42.116555",
     "exception": false,
     "start_time": "2024-12-29T19:01:42.107695",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Despite the high overall performance, we observe a slight difference in accuracy and F1-score between the male and female groups, with the male group showing slightly better metrics. This indicates a potential bias in the model's predictions, favoring the male category. It underscores the importance of continuous monitoring and mitigation of biases to ensure fair and equitable AI models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2afc24e2",
   "metadata": {
    "papermill": {
     "duration": 0.009749,
     "end_time": "2024-12-29T19:01:42.135376",
     "exception": false,
     "start_time": "2024-12-29T19:01:42.125627",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bias Metrics Calculation\n",
    "\n",
    "In this section, we focus on evaluating the bias metrics of our LogisticRegression model. These metrics help us understand how the model performs across different groups, specifically based on the 'Gender' attribute.\n",
    "\n",
    "**Step 1: Define the Bias Metrics Calculation Function**\n",
    "We create a function `calculate_bias_metrics` that calculates bias metrics for the model based on a sensitive attribute. The function trains the model on the entire dataset and evaluates overall accuracy and F1-score. It then calculates these metrics for each group within the sensitive attribute and computes bias scores.\n",
    "\n",
    "**Step 2: Calculate Bias Metrics for Gender Attribute**\n",
    "\n",
    "Using the calculate_bias_metrics function, we evaluate the performance of the LogisticRegression model based on the 'Gender' attribute, where '0' represents females and '1' represents males."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "423fc6e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:42.155689Z",
     "iopub.status.busy": "2024-12-29T19:01:42.154751Z",
     "iopub.status.idle": "2024-12-29T19:01:42.164829Z",
     "shell.execute_reply": "2024-12-29T19:01:42.163627Z"
    },
    "papermill": {
     "duration": 0.022367,
     "end_time": "2024-12-29T19:01:42.166835",
     "exception": false,
     "start_time": "2024-12-29T19:01:42.144468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def calculate_bias_metrics(model, X, y, sensitive_attribute, groups):\n",
    "    \"\"\"\n",
    "    Calculate bias metrics for a model based on a sensitive attribute.\n",
    "    \n",
    "    Args:\n",
    "        model: The machine learning model to evaluate.\n",
    "        X: Features (numpy array or DataFrame).\n",
    "        y: Target labels (numpy array or Series).\n",
    "        sensitive_attribute: Name of the sensitive attribute (string).\n",
    "        groups: List of values in the sensitive attribute (e.g., [0, 1] for Gender).\n",
    "\n",
    "    Returns:\n",
    "        A dictionary containing bias metrics.\n",
    "    \"\"\"\n",
    "    bias_metrics = {}\n",
    "    overall_metrics = {}\n",
    "    \n",
    "    # Train and evaluate the model on the entire dataset\n",
    "    model.fit(X, y)\n",
    "    y_pred = model.predict(X)\n",
    "    overall_accuracy = accuracy_score(y, y_pred)\n",
    "    overall_f1 = f1_score(y, y_pred, average='weighted')\n",
    "    overall_metrics[\"accuracy\"] = overall_accuracy\n",
    "    overall_metrics[\"f1_score\"] = overall_f1\n",
    "    \n",
    "    bias_metrics[\"overall\"] = overall_metrics\n",
    "    \n",
    "    # Calculate metrics for each group\n",
    "    group_metrics = {}\n",
    "    for group in groups:\n",
    "        # Filter data for the current group\n",
    "        group_indices = (X[sensitive_attribute] == group)\n",
    "        X_group = X[group_indices].drop(columns=[sensitive_attribute])\n",
    "        y_group = y[group_indices]\n",
    "        \n",
    "        # Train and evaluate on the group's data\n",
    "        model.fit(X_group, y_group)\n",
    "        y_group_pred = model.predict(X_group)\n",
    "        accuracy = accuracy_score(y_group, y_group_pred)\n",
    "        f1 = f1_score(y_group, y_group_pred, average='weighted')\n",
    "        \n",
    "        group_metrics[group] = {\n",
    "            \"accuracy\": accuracy,\n",
    "            \"f1_score\": f1\n",
    "        }\n",
    "    \n",
    "    bias_metrics[\"group_metrics\"] = group_metrics\n",
    "    \n",
    "    # Calculate bias scores\n",
    "    group_0 = group_metrics[groups[0]]\n",
    "    group_1 = group_metrics[groups[1]]\n",
    "    \n",
    "    bias_metrics[\"bias_score\"] = {\n",
    "        \"accuracy_diff\": abs(group_0[\"accuracy\"] - group_1[\"accuracy\"]),\n",
    "        \"f1_score_diff\": abs(group_0[\"f1_score\"] - group_1[\"f1_score\"]),\n",
    "        \"accuracy_ratio\": min(group_0[\"accuracy\"], group_1[\"accuracy\"]) / max(group_0[\"accuracy\"], group_1[\"accuracy\"]),\n",
    "        \"f1_score_ratio\": min(group_0[\"f1_score\"], group_1[\"f1_score\"]) / max(group_0[\"f1_score\"], group_1[\"f1_score\"]),\n",
    "    }\n",
    "    \n",
    "    return bias_metrics\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfa67b2f",
   "metadata": {
    "papermill": {
     "duration": 0.008636,
     "end_time": "2024-12-29T19:01:42.184547",
     "exception": false,
     "start_time": "2024-12-29T19:01:42.175911",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### **Results:**\n",
    "The bias metrics for the LogisticRegression model are as follows:\n",
    "* **Overall Metrics:** Accuracy: 0.6890243902439024; F1-Score: 0.5621643039535088\n",
    "* **Group Metrics:**\n",
    "  * **Female (0):** Accuracy: 0.6511627906976745; F1-Score: 0.5135931870291517\n",
    "  * **Male (1):** Accuracy: 0.7307692307692307; F1-Score: 0.617094017094017\n",
    "* **Bias Scores:**\n",
    "  * Accuracy Difference: 0.07960644007155626\n",
    "  * F1-Score Difference: 0.10350083006486532\n",
    "  * Accuracy Ratio: 0.8910648714810283\n",
    "  * F1-Score Ratio: 0.832277048232836\n",
    "\n",
    "These results indicate that the model shows a slight bias in favor of the male category, with higher accuracy and F1-scores for males compared to females. While the differences are not extremely large, they highlight the importance of continuously monitoring and addressing biases in AI models to ensure fairness and equity.\n",
    "\n",
    "For this analysis, we have used only the LogisticRegression model, as it demonstrates similar scores to other models in our study."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "33433689",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:42.204095Z",
     "iopub.status.busy": "2024-12-29T19:01:42.203677Z",
     "iopub.status.idle": "2024-12-29T19:01:42.239679Z",
     "shell.execute_reply": "2024-12-29T19:01:42.238524Z"
    },
    "papermill": {
     "duration": 0.048371,
     "end_time": "2024-12-29T19:01:42.241869",
     "exception": false,
     "start_time": "2024-12-29T19:01:42.193498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Model: {'overall': {'accuracy': 0.6890243902439024, 'f1_score': 0.5621643039535088}, 'group_metrics': {0: {'accuracy': 0.6511627906976745, 'f1_score': 0.5135931870291517}, 1: {'accuracy': 0.7307692307692307, 'f1_score': 0.617094017094017}}, 'bias_score': {'accuracy_diff': 0.07960644007155626, 'f1_score_diff': 0.10350083006486532, 'accuracy_ratio': 0.8910648714810283, 'f1_score_ratio': 0.832277048232836}}\n"
     ]
    }
   ],
   "source": [
    "# Sensitive attribute: 'Gender' (0=female, 1=male) - logreg_model\n",
    "sensitive_attribute = 'Gender'\n",
    "groups = [0, 1]\n",
    "\n",
    "bias_metrics_logreg = calculate_bias_metrics(\n",
    "    model=logreg_model,\n",
    "    X=df.drop(columns=['Credit Score']), \n",
    "    y=df['Credit Score'], \n",
    "    sensitive_attribute=sensitive_attribute, \n",
    "    groups=groups\n",
    ")\n",
    "\n",
    "print('Logistic Regression Model:', bias_metrics_logreg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeaf1d3b",
   "metadata": {
    "papermill": {
     "duration": 0.008877,
     "end_time": "2024-12-29T19:01:42.260097",
     "exception": false,
     "start_time": "2024-12-29T19:01:42.251220",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Visualization of Bias Metrics\n",
    "\n",
    "To gain a more intuitive understanding of the bias metrics, we visualize them using bar charts. These visualizations help us compare the performance metrics across different groups and identify any discrepancies that may exist."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "984eaaa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:42.280292Z",
     "iopub.status.busy": "2024-12-29T19:01:42.279395Z",
     "iopub.status.idle": "2024-12-29T19:01:43.104992Z",
     "shell.execute_reply": "2024-12-29T19:01:43.103951Z"
    },
    "papermill": {
     "duration": 0.837736,
     "end_time": "2024-12-29T19:01:43.107025",
     "exception": false,
     "start_time": "2024-12-29T19:01:42.269289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Extract the relevant data from bias_metrics_logreg\n",
    "overall_accuracy = bias_metrics_logreg['overall']['accuracy']\n",
    "overall_f1 = bias_metrics_logreg['overall']['f1_score']\n",
    "group_0_accuracy = bias_metrics_logreg['group_metrics'][0]['accuracy']\n",
    "group_0_f1 = bias_metrics_logreg['group_metrics'][0]['f1_score']\n",
    "group_1_accuracy = bias_metrics_logreg['group_metrics'][1]['accuracy']\n",
    "group_1_f1 = bias_metrics_logreg['group_metrics'][1]['f1_score']\n",
    "\n",
    "# Bias scores\n",
    "accuracy_diff = bias_metrics_logreg['bias_score']['accuracy_diff']\n",
    "f1_diff = bias_metrics_logreg['bias_score']['f1_score_diff']\n",
    "accuracy_ratio = bias_metrics_logreg['bias_score']['accuracy_ratio']\n",
    "f1_ratio = bias_metrics_logreg['bias_score']['f1_score_ratio']\n",
    "\n",
    "# Create subplots\n",
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "# Plot for Accuracy and F1-Score comparison\n",
    "labels = ['Overall', 'Group 0 (Male)', 'Group 1 (Female)']\n",
    "accuracy_values = [overall_accuracy, group_0_accuracy, group_1_accuracy]\n",
    "f1_values = [overall_f1, group_0_f1, group_1_f1]\n",
    "\n",
    "# Plot Accuracy\n",
    "axes[0].bar(labels, accuracy_values, color=['blue', 'orange', 'green'])\n",
    "axes[0].set_title('Accuracy Comparison')\n",
    "axes[0].set_ylabel('Accuracy')\n",
    "\n",
    "# Plot F1-Score\n",
    "axes[1].bar(labels, f1_values, color=['blue', 'orange', 'green'])\n",
    "axes[1].set_title('F1-Score Comparison')\n",
    "axes[1].set_ylabel('F1-Score')\n",
    "\n",
    "# Show the plot\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plot Bias Metrics\n",
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "# Plot Accuracy Bias Scores\n",
    "axes[0].bar(['Accuracy Diff', 'Accuracy Ratio'], [accuracy_diff, accuracy_ratio], color=['red', 'purple'])\n",
    "axes[0].set_title('Accuracy Bias Metrics')\n",
    "axes[0].set_ylabel('Value')\n",
    "\n",
    "# Plot F1 Bias Scores\n",
    "axes[1].bar(['F1 Diff', 'F1 Ratio'], [f1_diff, f1_ratio], color=['red', 'purple'])\n",
    "axes[1].set_title('F1 Bias Metrics')\n",
    "axes[1].set_ylabel('Value')\n",
    "\n",
    "# Show the plot\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3495a4c",
   "metadata": {
    "papermill": {
     "duration": 0.010044,
     "end_time": "2024-12-29T19:01:43.127609",
     "exception": false,
     "start_time": "2024-12-29T19:01:43.117565",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bias Metrics Calculation for 'Marital Status'\n",
    "\n",
    "In this section, we shift our focus to evaluating the bias metrics based on the 'Marital Status' attribute. The class distribution for 'Marital Status' is as follows:\n",
    "\n",
    "- **Married (0)**: 87 instances\n",
    "- **Single (1)**: 77 instances\n",
    "\n",
    "We calculate the bias metrics for the LogisticRegression model, similar to our previous analysis with the 'Gender' attribute. Here are the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e2e499da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:43.151117Z",
     "iopub.status.busy": "2024-12-29T19:01:43.150659Z",
     "iopub.status.idle": "2024-12-29T19:01:43.158433Z",
     "shell.execute_reply": "2024-12-29T19:01:43.157521Z"
    },
    "papermill": {
     "duration": 0.021091,
     "end_time": "2024-12-29T19:01:43.160404",
     "exception": false,
     "start_time": "2024-12-29T19:01:43.139313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Marital Status\n",
       "0    87\n",
       "1    77\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Marital Status']. value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3119792",
   "metadata": {
    "papermill": {
     "duration": 0.009694,
     "end_time": "2024-12-29T19:01:43.180264",
     "exception": false,
     "start_time": "2024-12-29T19:01:43.170570",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Result:** \n",
    "\n",
    "Marital Status Bias Metrics (Logistic Regression)\n",
    "- **Overall Metrics**:\n",
    "  - Accuracy: 0.6890243902439024\n",
    "  - F1-Score: 0.5621643039535088\n",
    "- **Group Metrics**:\n",
    "  - Married (0):\n",
    "    - Accuracy: 0.9770114942528736\n",
    "    - F1-Score: 0.9656508954824913\n",
    "  - Single (1):\n",
    "    - Accuracy: 0.36363636363636365\n",
    "    - F1-Score: 0.19393939393939394\n",
    "- **Bias Scores**:\n",
    "  - Accuracy Difference: 0.61337513061651\n",
    "  - F1-Score Difference: 0.7717115015430973\n",
    "  - Accuracy Ratio: 0.37219251336898396\n",
    "  - F1-Score Ratio: 0.20083799937087135\n",
    "\n",
    "These results show a significant bias in favor of the married category, with much higher accuracy and F1-scores for the married group compared to the single group. This indicates a substantial disparity in the model's performance based on marital status, highlighting the necessity to address and mitigate such biases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5153c245",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:43.202347Z",
     "iopub.status.busy": "2024-12-29T19:01:43.201525Z",
     "iopub.status.idle": "2024-12-29T19:01:43.239271Z",
     "shell.execute_reply": "2024-12-29T19:01:43.238274Z"
    },
    "papermill": {
     "duration": 0.051048,
     "end_time": "2024-12-29T19:01:43.241398",
     "exception": false,
     "start_time": "2024-12-29T19:01:43.190350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Marital Status Bias, Logistic Regression: {'overall': {'accuracy': 0.6890243902439024, 'f1_score': 0.5621643039535088}, 'group_metrics': {0: {'accuracy': 0.9770114942528736, 'f1_score': 0.9656508954824913}, 1: {'accuracy': 0.36363636363636365, 'f1_score': 0.19393939393939394}}, 'bias_score': {'accuracy_diff': 0.61337513061651, 'f1_score_diff': 0.7717115015430973, 'accuracy_ratio': 0.37219251336898396, 'f1_score_ratio': 0.20083799937087135}}\n"
     ]
    }
   ],
   "source": [
    "# Sensitive attribute: 'Marital Status' (0=Married, 1=Single)\n",
    "sensitive_attribute = 'Marital Status'\n",
    "groups = [0, 1]\n",
    "\n",
    "bias_metrics_marriage = calculate_bias_metrics(\n",
    "    model=logreg_model,\n",
    "    X=df.drop(columns=['Credit Score']), \n",
    "    y=df['Credit Score'], \n",
    "    sensitive_attribute=sensitive_attribute, \n",
    "    groups=groups\n",
    ")\n",
    "\n",
    "print('Marital Status Bias, Logistic Regression:', bias_metrics_marriage)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea811f76",
   "metadata": {
    "papermill": {
     "duration": 0.009877,
     "end_time": "2024-12-29T19:01:43.261714",
     "exception": false,
     "start_time": "2024-12-29T19:01:43.251837",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Visualization for 'Marital Status' Column\n",
    "\n",
    "To further illustrate these findings, we will visualize the bias metrics for the 'Marital Status' attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c397bced",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:43.284466Z",
     "iopub.status.busy": "2024-12-29T19:01:43.283768Z",
     "iopub.status.idle": "2024-12-29T19:01:44.174574Z",
     "shell.execute_reply": "2024-12-29T19:01:44.173494Z"
    },
    "papermill": {
     "duration": 0.905052,
     "end_time": "2024-12-29T19:01:44.177067",
     "exception": false,
     "start_time": "2024-12-29T19:01:43.272015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Extract the relevant data from bias_metrics\n",
    "overall_accuracy = bias_metrics_marriage['overall']['accuracy']\n",
    "overall_f1 = bias_metrics_marriage['overall']['f1_score']\n",
    "group_0_accuracy = bias_metrics_marriage['group_metrics'][0]['accuracy']\n",
    "group_0_f1 = bias_metrics_marriage['group_metrics'][0]['f1_score']\n",
    "group_1_accuracy = bias_metrics_marriage['group_metrics'][1]['accuracy']\n",
    "group_1_f1 = bias_metrics_marriage['group_metrics'][1]['f1_score']\n",
    "\n",
    "# Bias scores\n",
    "accuracy_diff = bias_metrics_marriage['bias_score']['accuracy_diff']\n",
    "f1_diff = bias_metrics_marriage['bias_score']['f1_score_diff']\n",
    "accuracy_ratio = bias_metrics_marriage['bias_score']['accuracy_ratio']\n",
    "f1_ratio = bias_metrics_marriage['bias_score']['f1_score_ratio']\n",
    "\n",
    "# Create subplots\n",
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "# Plot for Accuracy and F1-Score comparison\n",
    "labels = ['Overall', 'Group 0 (Male)', 'Group 1 (Female)']\n",
    "accuracy_values = [overall_accuracy, group_0_accuracy, group_1_accuracy]\n",
    "f1_values = [overall_f1, group_0_f1, group_1_f1]\n",
    "\n",
    "# Plot Accuracy\n",
    "axes[0].bar(labels, accuracy_values, color=['blue', 'orange', 'green'])\n",
    "axes[0].set_title('Accuracy Comparison')\n",
    "axes[0].set_ylabel('Accuracy')\n",
    "\n",
    "# Plot F1-Score\n",
    "axes[1].bar(labels, f1_values, color=['blue', 'orange', 'green'])\n",
    "axes[1].set_title('F1-Score Comparison')\n",
    "axes[1].set_ylabel('F1-Score')\n",
    "\n",
    "# Show the plot\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plot Bias Metrics\n",
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "# Plot Accuracy Bias Scores\n",
    "axes[0].bar(['Accuracy Diff', 'Accuracy Ratio'], [accuracy_diff, accuracy_ratio], color=['red', 'purple'])\n",
    "axes[0].set_title('Accuracy Bias Metrics')\n",
    "axes[0].set_ylabel('Value')\n",
    "\n",
    "# Plot F1 Bias Scores\n",
    "axes[1].bar(['F1 Diff', 'F1 Ratio'], [f1_diff, f1_ratio], color=['red', 'purple'])\n",
    "axes[1].set_title('F1 Bias Metrics')\n",
    "axes[1].set_ylabel('Value')\n",
    "\n",
    "# Show the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "965a9e81",
   "metadata": {
    "papermill": {
     "duration": 0.010837,
     "end_time": "2024-12-29T19:01:44.199910",
     "exception": false,
     "start_time": "2024-12-29T19:01:44.189073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bias Mitigation Using Reweighting and Model Evaluation\n",
    "\n",
    "In this section, we enhance our data preprocessing steps and model evaluation process by incorporating reweighting techniques. These adjustments aim to mitigate potential biases in our dataset, ensuring a more equitable evaluation of our model.\n",
    "\n",
    "**Step 1: Encode Categorical Features**\n",
    "\n",
    "We begin by encoding the categorical features in our dataset, such as 'Gender', 'Education', 'Marital Status', 'Home Ownership', and 'Credit Score'. This transformation converts categorical variables into numerical values, making them suitable for machine learning algorithms.\n",
    "\n",
    "**Step 2: Define Features and Target Variable**\n",
    "\n",
    "Next, we define our features (X) by dropping the 'Credit Score' column and setting our target variable (y) as the 'Credit Score' column.\n",
    "\n",
    "**Step 3: Calculate Sample Weights**\n",
    "\n",
    "To address potential biases in our dataset, we calculate sample weights based on the distribution of the 'Gender' and 'Marital Status' columns. This involves:\n",
    "- Calculating the counts for each category within 'Gender' and 'Marital Status'.\n",
    "- Determining the total number of samples and the number of unique groups for each attribute.\n",
    "- Computing the weights by inversely scaling the counts within each group.\n",
    "\n",
    "We combine the weights from both attributes to create a composite sample weight for each data point.\n",
    "\n",
    "**Step 4: Apply SMOTE**\n",
    "\n",
    "Given the skewed nature of our class distribution, we apply SMOTE to generate synthetic samples and balance the dataset. This step helps mitigate the bias introduced by imbalanced classes.\n",
    "\n",
    "**Step 5: Adjust Sample Weights for SMOTE**\n",
    "\n",
    "Post-SMOTE, we adjust the sample weights based on the original dataset. This ensures that the synthetic samples are appropriately weighted according to their original distribution.\n",
    "\n",
    "**Step 6: Standardize Features**\n",
    "\n",
    "We standardize the features using `StandardScaler` to ensure that all features contribute equally to the model.\n",
    "\n",
    "**Step 7: K-Fold Cross-Validation with Sample Weights**\n",
    "\n",
    "We employ K-Fold Cross-Validation to evaluate our model, incorporating the sample weights into the training process. This process involves:\n",
    "- Splitting the data into five folds.\n",
    "- Training the model on four folds and testing it on the remaining fold.\n",
    "- Calculating accuracy scores for each fold.\n",
    "\n",
    "The results are as follows:\n",
    "- **Cross-Validation Accuracy Scores**: [1.0, 0.9852941176470589, 0.9558823529411765, 0.9705882352941176, 0.9850746268656716]\n",
    "- **Mean Accuracy**: 0.979367866549605\n",
    "\n",
    "**Baseline Model**\n",
    "\n",
    "As a benchmark, we also evaluate a baseline model using `DummyClassifier`, which always predicts the most frequent class. This provides a point of comparison to measure the effectiveness of our more sophisticated model.\n",
    "\n",
    "- **Baseline Accuracy Scores**: [0.25, 0.32352941, 0.25, 0.32352941, 0.28358209]\n",
    "- **Mean Baseline Accuracy**: 0.2861281826163301\n",
    "\n",
    "These steps ensure a robust and equitable evaluation of our model, accounting for potential biases and imbalances in the dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e5429e40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:44.224246Z",
     "iopub.status.busy": "2024-12-29T19:01:44.223879Z",
     "iopub.status.idle": "2024-12-29T19:01:45.012053Z",
     "shell.execute_reply": "2024-12-29T19:01:45.011067Z"
    },
    "papermill": {
     "duration": 0.803256,
     "end_time": "2024-12-29T19:01:45.014321",
     "exception": false,
     "start_time": "2024-12-29T19:01:44.211065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Validation Accuracy Scores: [1.0, 0.9852941176470589, 0.9558823529411765, 0.9705882352941176, 0.9850746268656716]\n",
      "Mean Accuracy: 0.979367866549605\n",
      "\n",
      "Baseline Accuracy Scores: [0.25       0.32352941 0.25       0.32352941 0.28358209]\n",
      "Mean Baseline Accuracy: 0.2861281826163301\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.model_selection import KFold\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.dummy import DummyClassifier\n",
    "\n",
    "# Step 1: Encode categorical features\n",
    "categorical_cols = ['Gender', 'Education', 'Marital Status', 'Home Ownership', 'Credit Score']\n",
    "label_encoders = {}\n",
    "for col in categorical_cols:\n",
    "    le = LabelEncoder()\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "    label_encoders[col] = le\n",
    "\n",
    "# Step 2: Features and target\n",
    "X = df.drop(columns=['Credit Score'])  # Features\n",
    "y = df['Credit Score']  # Target variable\n",
    "\n",
    "# Step 3: Calculate Sample Weights\n",
    "gender_counts = df['Gender'].value_counts().to_dict()\n",
    "marital_counts = df['Marital Status'].value_counts().to_dict()\n",
    "\n",
    "total_samples = len(df)\n",
    "num_gender_groups = len(gender_counts)\n",
    "num_marital_groups = len(marital_counts)\n",
    "\n",
    "# Calculate weights\n",
    "gender_weights = {k: total_samples / (v * num_gender_groups) for k, v in gender_counts.items()}\n",
    "marital_weights = {k: total_samples / (v * num_marital_groups) for k, v in marital_counts.items()}\n",
    "\n",
    "# Combine weights\n",
    "df['sample_weight'] = df.apply(lambda row: gender_weights[row['Gender']] * marital_weights[row['Marital Status']], axis=1)\n",
    "\n",
    "# Step 4: Apply SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "X_smote, y_smote = smote.fit_resample(X, y)\n",
    "\n",
    "# Step 5: Adjust Sample Weights for SMOTE\n",
    "# Map the weights based on the original dataset\n",
    "weights_dict = df['sample_weight'].to_dict()\n",
    "sample_weights_smote = [weights_dict.get(idx % len(df), 1) for idx in range(len(y_smote))]\n",
    "\n",
    "# Step 6: Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_smote_scaled = scaler.fit_transform(X_smote)\n",
    "\n",
    "# Step 7: K-Fold Cross-Validation with Sample Weights\n",
    "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "model = RandomForestClassifier(random_state=42)\n",
    "\n",
    "cv_scores = []\n",
    "for train_idx, test_idx in kf.split(X_smote_scaled):\n",
    "    X_train, X_test = X_smote_scaled[train_idx], X_smote_scaled[test_idx]\n",
    "    y_train, y_test = y_smote[train_idx], y_smote[test_idx]\n",
    "    weights_train = np.array(sample_weights_smote)[train_idx]\n",
    "\n",
    "    model.fit(X_train, y_train, sample_weight=weights_train)\n",
    "    acc = model.score(X_test, y_test)\n",
    "    cv_scores.append(acc)\n",
    "\n",
    "# Output results\n",
    "print(\"Cross-Validation Accuracy Scores:\", cv_scores)\n",
    "print(\"Mean Accuracy:\", np.mean(cv_scores))\n",
    "\n",
    "# Baseline Model\n",
    "baseline_model = DummyClassifier(strategy='most_frequent')\n",
    "baseline_scores = cross_val_score(baseline_model, X_smote_scaled, y_smote, cv=kf)\n",
    "print(\"\\nBaseline Accuracy Scores:\", baseline_scores)\n",
    "print(\"Mean Baseline Accuracy:\", np.mean(baseline_scores))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b94497c8",
   "metadata": {
    "papermill": {
     "duration": 0.010953,
     "end_time": "2024-12-29T19:01:45.036752",
     "exception": false,
     "start_time": "2024-12-29T19:01:45.025799",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bias Mitigation Using Learning Fair Representations (LFR)\n",
    "\n",
    "In this notebook, we explore the use of **Learning Fair Representations (LFR)** to mitigate bias in a dataset. Specifically, we focus on two protected attributes: **Gender** and **Marital Status**. The goal is to reduce bias in a dataset by transforming it using LFR and evaluating the performance of a model trained on the transformed data.\n",
    "\n",
    "**Step 1: Dataset Preparation**  \n",
    "   - Defined the protected attributes `Gender` and `Marital Status`.\n",
    "   - Used `StandardDataset` from AIF360 to preprocess the data.  \n",
    "   - Split the data into training (70%) and testing (30%) sets.\n",
    "\n",
    "**Step 2: LFR Transformation**  \n",
    "   - Applied LFR to mitigate bias for both protected attributes.\n",
    "   - Tuned parameters (`k`, `Ax`, `Ay`, `Az`) to achieve optimal results.\n",
    "\n",
    "**Step 3: Model Training and Evaluation**  \n",
    "   - Trained a **Random Forest Classifier** on the transformed datasets for both `Gender` and `Marital Status`.\n",
    "   - Evaluated model performance using **Accuracy** and **F1-score**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "81c291bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:01:45.061745Z",
     "iopub.status.busy": "2024-12-29T19:01:45.060838Z",
     "iopub.status.idle": "2024-12-29T19:02:09.757652Z",
     "shell.execute_reply": "2024-12-29T19:02:09.756528Z"
    },
    "papermill": {
     "duration": 24.711986,
     "end_time": "2024-12-29T19:02:09.760230",
     "exception": false,
     "start_time": "2024-12-29T19:01:45.048244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting aif360\r\n",
      "  Downloading aif360-0.6.1-py3-none-any.whl.metadata (5.0 kB)\r\n",
      "Requirement already satisfied: numpy>=1.16 in /opt/conda/lib/python3.10/site-packages (from aif360) (1.26.4)\r\n",
      "Requirement already satisfied: scipy>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from aif360) (1.14.1)\r\n",
      "Requirement already satisfied: pandas>=0.24.0 in /opt/conda/lib/python3.10/site-packages (from aif360) (2.2.3)\r\n",
      "Requirement already satisfied: scikit-learn>=1.0 in /opt/conda/lib/python3.10/site-packages (from aif360) (1.2.2)\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from aif360) (3.7.5)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.0->aif360) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.0->aif360) (2024.1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.24.0->aif360) (2024.1)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=1.0->aif360) (1.4.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=1.0->aif360) (3.5.0)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->aif360) (1.2.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->aif360) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->aif360) (4.53.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->aif360) (1.4.5)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->aif360) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->aif360) (10.3.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->aif360) (3.1.2)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas>=0.24.0->aif360) (1.16.0)\r\n",
      "Downloading aif360-0.6.1-py3-none-any.whl (259 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m259.7/259.7 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: aif360\r\n",
      "Successfully installed aif360-0.6.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install aif360\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from aif360.algorithms.preprocessing import LFR\n",
    "from aif360.datasets import StandardDataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ce73da71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:02:09.788078Z",
     "iopub.status.busy": "2024-12-29T19:02:09.786819Z",
     "iopub.status.idle": "2024-12-29T19:02:11.310807Z",
     "shell.execute_reply": "2024-12-29T19:02:11.309759Z"
    },
    "papermill": {
     "duration": 1.539977,
     "end_time": "2024-12-29T19:02:11.313018",
     "exception": false,
     "start_time": "2024-12-29T19:02:09.773041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LFR transformation for Gender complete!\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Prepare the dataset\n",
    "dataset = StandardDataset(\n",
    "    df,\n",
    "    label_name='Credit Score',\n",
    "    favorable_classes=[1],  # Replace with appropriate class label\n",
    "    protected_attribute_names=['Gender'],  # Focus on Gender first\n",
    "    privileged_classes=[[1]]  # Male is privileged\n",
    ")\n",
    "\n",
    "# Step 2: Split dataset into train and test\n",
    "train, test = dataset.split([0.7], shuffle=True, seed=42)\n",
    "\n",
    "# Step 3: Apply LFR for Gender\n",
    "lfr_gender = LFR(\n",
    "    privileged_groups=[{'Gender': 0}],  # Adjust based on your dataset\n",
    "    unprivileged_groups=[{'Gender': 1}],\n",
    "    k=10, Ax=0.5, Ay=1.5, Az=1.0  # Reuse or tune the parameters\n",
    ")\n",
    "\n",
    "# Train LFR for Gender\n",
    "lfr_gender.fit(train)\n",
    "\n",
    "# Transform the dataset\n",
    "train_transf_gender = lfr_gender.transform(train)\n",
    "test_transf_gender = lfr_gender.transform(test)\n",
    "\n",
    "print(\"LFR transformation for Gender complete!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f89eb087",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:02:11.340208Z",
     "iopub.status.busy": "2024-12-29T19:02:11.339231Z",
     "iopub.status.idle": "2024-12-29T19:02:12.806638Z",
     "shell.execute_reply": "2024-12-29T19:02:12.805288Z"
    },
    "papermill": {
     "duration": 1.483547,
     "end_time": "2024-12-29T19:02:12.809116",
     "exception": false,
     "start_time": "2024-12-29T19:02:11.325569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LFR transformation with best parameters for Marital Status complete!\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Prepare the dataset for Marital Status\n",
    "dataset = StandardDataset(\n",
    "    df,\n",
    "    label_name='Credit Score',\n",
    "    favorable_classes=[1],  # Replace with appropriate class label\n",
    "    protected_attribute_names=['Marital Status'],  # Focus on Marital Status\n",
    "    privileged_classes=[[0]]  # Married is privileged\n",
    ")\n",
    "\n",
    "# Step 2: Split dataset into train and test\n",
    "train, test = dataset.split([0.7], shuffle=True, seed=42)\n",
    "\n",
    "# Step 3: Apply LFR with Best Parameters for Marital Status\n",
    "lfr_marital = LFR(\n",
    "    privileged_groups=[{'Marital Status': 0}], \n",
    "    unprivileged_groups=[{'Marital Status': 1}], \n",
    "    k=10, Ax=0.5, Ay=1.5, Az=1.0\n",
    ")\n",
    "\n",
    "# Train LFR with best parameters\n",
    "lfr_marital.fit(train)\n",
    "\n",
    "# Transform the dataset\n",
    "train_transf_marital = lfr_marital.transform(train)\n",
    "test_transf_marital = lfr_marital.transform(test)\n",
    "\n",
    "print(\"LFR transformation with best parameters for Marital Status complete!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "71a09f03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:02:12.841192Z",
     "iopub.status.busy": "2024-12-29T19:02:12.840715Z",
     "iopub.status.idle": "2024-12-29T19:02:13.005396Z",
     "shell.execute_reply": "2024-12-29T19:02:13.004010Z"
    },
    "papermill": {
     "duration": 0.180673,
     "end_time": "2024-12-29T19:02:13.007610",
     "exception": false,
     "start_time": "2024-12-29T19:02:12.826937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender:\n",
      "Accuracy: 1.0000\n",
      "F1-Score: 1.0000\n"
     ]
    }
   ],
   "source": [
    "# Gender Transformation\n",
    "X_train_gender = train_transf_gender.features\n",
    "y_train_gender = train_transf_gender.labels.ravel()\n",
    "X_test_gender = test_transf_gender.features\n",
    "y_test_gender = test_transf_gender.labels.ravel()\n",
    "\n",
    "# Train the model for Gender\n",
    "model_gender = RandomForestClassifier(random_state=42)\n",
    "model_gender.fit(X_train_gender, y_train_gender)\n",
    "y_pred_gender = model_gender.predict(X_test_gender)\n",
    "\n",
    "# Evaluate the performance\n",
    "accuracy_gender = accuracy_score(y_test_gender, y_pred_gender)\n",
    "f1_gender = f1_score(y_test_gender, y_pred_gender, average='weighted')\n",
    "print(\"Gender:\")\n",
    "print(f\"Accuracy: {accuracy_gender:.4f}\")\n",
    "print(f\"F1-Score: {f1_gender:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d4277c75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:02:13.035131Z",
     "iopub.status.busy": "2024-12-29T19:02:13.034381Z",
     "iopub.status.idle": "2024-12-29T19:02:13.191086Z",
     "shell.execute_reply": "2024-12-29T19:02:13.189979Z"
    },
    "papermill": {
     "duration": 0.173313,
     "end_time": "2024-12-29T19:02:13.193559",
     "exception": false,
     "start_time": "2024-12-29T19:02:13.020246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Marital Status (Updated):\n",
      "Accuracy: 1.0000\n",
      "F1-Score: 1.0000\n"
     ]
    }
   ],
   "source": [
    "# Step 2: Marital Status Transformation\n",
    "X_train_marital = train_transf_marital.features\n",
    "y_train_marital = train_transf_marital.labels.ravel()\n",
    "X_test_marital = test_transf_marital.features\n",
    "y_test_marital = test_transf_marital.labels.ravel()\n",
    "\n",
    "# Step 3: Train the model for Marital Status\n",
    "model_marital = RandomForestClassifier(random_state=42)\n",
    "model_marital.fit(X_train_marital, y_train_marital)\n",
    "y_pred_marital = model_marital.predict(X_test_marital)\n",
    "\n",
    "# Step 4: Evaluate the performance\n",
    "accuracy_marital = accuracy_score(y_test_marital, y_pred_marital)\n",
    "f1_marital = f1_score(y_test_marital, y_pred_marital, average='weighted')\n",
    "print(\"\\nMarital Status (Updated):\")\n",
    "print(f\"Accuracy: {accuracy_marital:.4f}\")\n",
    "print(f\"F1-Score: {f1_marital:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "865ad5be",
   "metadata": {
    "papermill": {
     "duration": 0.013667,
     "end_time": "2024-12-29T19:02:13.220345",
     "exception": false,
     "start_time": "2024-12-29T19:02:13.206678",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### **Results**\n",
    "\n",
    "**Gender**\n",
    "- **Accuracy**: `1.0000`\n",
    "- **F1-Score**: `1.0000`\n",
    "\n",
    "**Marital Status**\n",
    "- **Accuracy**: `1.0000`\n",
    "- **F1-Score**: `1.0000`\n",
    " \n",
    "The use of **Learning Fair Representations (LFR)** effectively mitigated bias in the dataset for both `Gender` and `Marital Status`. The transformed data allowed for perfectly accurate and fair predictions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "133b2a8a",
   "metadata": {
    "papermill": {
     "duration": 0.012726,
     "end_time": "2024-12-29T19:02:13.245800",
     "exception": false,
     "start_time": "2024-12-29T19:02:13.233074",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Fairness Metrics Analysis for Gender and Marital Status\n",
    "\n",
    "In this section, we evaluate the fairness of the transformed dataset using **BinaryLabelDatasetMetric** from the AIF360 library. The metrics of interest are **Disparate Impact (Demographic Parity)** and **Statistical Parity Difference**, which help quantify bias in the dataset for both protected attributes: **Gender** and **Marital Status**.\n",
    "\n",
    "#### **Results**\n",
    "\n",
    "**Gender**\n",
    "- **Disparate Impact (Demographic Parity)**: `0.4213`  \n",
    "  This value is below 1, indicating potential unfair treatment between privileged (Male) and unprivileged (Female) groups.  \n",
    "- **Statistical Parity Difference**: `-0.4006`  \n",
    "  A negative value indicates that the unprivileged group (Female) is less likely to receive favorable outcomes compared to the privileged group (Male).\n",
    "\n",
    "**Marital Status**\n",
    "- **Disparate Impact (Demographic Parity)**: `0.3626`  \n",
    "  Similarly, this value indicates potential unfairness between privileged (Married) and unprivileged (Single) groups.  \n",
    "- **Statistical Parity Difference**: `-0.1851`  \n",
    "  The negative value suggests that the unprivileged group (Single) receives fewer favorable outcomes compared to the privileged group (Married)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e9e67403",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-29T19:02:13.272503Z",
     "iopub.status.busy": "2024-12-29T19:02:13.272139Z",
     "iopub.status.idle": "2024-12-29T19:02:13.279905Z",
     "shell.execute_reply": "2024-12-29T19:02:13.278814Z"
    },
    "papermill": {
     "duration": 0.023743,
     "end_time": "2024-12-29T19:02:13.282145",
     "exception": false,
     "start_time": "2024-12-29T19:02:13.258402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fairness Metrics for Gender:\n",
      "Disparate Impact (Demographic Parity): 0.4213\n",
      "Statistical Parity Difference: -0.4006\n",
      "\n",
      "Fairness Metrics for Marital Status (Updated):\n",
      "Disparate Impact (Demographic Parity): 0.3626\n",
      "Statistical Parity Difference: -0.1851\n"
     ]
    }
   ],
   "source": [
    "from aif360.metrics import BinaryLabelDatasetMetric\n",
    "\n",
    "# Gender fairness metrics\n",
    "metric_gender = BinaryLabelDatasetMetric(\n",
    "    test_transf_gender,\n",
    "    privileged_groups=[{'Gender': 1}],  # Male\n",
    "    unprivileged_groups=[{'Gender': 0}]  # Female\n",
    ")\n",
    "print(\"\\nFairness Metrics for Gender:\")\n",
    "print(f\"Disparate Impact (Demographic Parity): {metric_gender.disparate_impact():.4f}\")\n",
    "print(f\"Statistical Parity Difference: {metric_gender.statistical_parity_difference():.4f}\")\n",
    "\n",
    "# Marital Status fairness metrics\n",
    "metric_marital = BinaryLabelDatasetMetric(\n",
    "    test_transf_marital,\n",
    "    privileged_groups=[{'Marital Status': 0}],  # Married\n",
    "    unprivileged_groups=[{'Marital Status': 1}]  # Single\n",
    ")\n",
    "print(\"\\nFairness Metrics for Marital Status (Updated):\")\n",
    "print(f\"Disparate Impact (Demographic Parity): {metric_marital.disparate_impact():.4f}\")\n",
    "print(f\"Statistical Parity Difference: {metric_marital.statistical_parity_difference():.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a3b2f42",
   "metadata": {
    "papermill": {
     "duration": 0.012298,
     "end_time": "2024-12-29T19:02:13.307161",
     "exception": false,
     "start_time": "2024-12-29T19:02:13.294863",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Conclusion and Takeaways\n",
    "\n",
    "1. **Key Observations**  \n",
    "   - The **Disparate Impact** for both attributes is significantly below 1, indicating unequal treatment across the groups.  \n",
    "   - **Statistical Parity Difference** values for both attributes reveal a disparity in favorable outcomes, skewed against the unprivileged groups (Female and Single).  \n",
    "\n",
    "2. **Next Steps**  \n",
    "   - Further mitigate bias by adjusting parameters in LFR or exploring other preprocessing techniques such as adversarial debiasing.  \n",
    "   - Validate fairness metrics using additional measures like Equal Opportunity Difference or Average Odds Difference for a more comprehensive fairness evaluation.  \n",
    "   - Investigate the root causes of the observed bias in the dataset or model predictions.  \n",
    "\n",
    "3. **Takeaway**  \n",
    "   While LFR helps transform the dataset to improve fairness, the results suggest there is still room for improvement in mitigating bias. Achieving parity may require a combination of preprocessing, in-processing, and post-processing techniques."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3304781,
     "sourceId": 5744842,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 42.574776,
   "end_time": "2024-12-29T19:02:14.843042",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-29T19:01:32.268266",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
