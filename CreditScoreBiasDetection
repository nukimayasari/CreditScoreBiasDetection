{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fb6e8d08",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-29T08:58:54.993883Z",
     "iopub.status.busy": "2024-11-29T08:58:54.993484Z",
     "iopub.status.idle": "2024-11-29T08:58:55.962921Z",
     "shell.execute_reply": "2024-11-29T08:58:55.961645Z"
    },
    "papermill": {
     "duration": 0.977403,
     "end_time": "2024-11-29T08:58:55.965292",
     "exception": false,
     "start_time": "2024-11-29T08:58:54.987889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/credit-score-classification-dataset/Credit Score Classification Dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6108893",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:58:55.973953Z",
     "iopub.status.busy": "2024-11-29T08:58:55.973464Z",
     "iopub.status.idle": "2024-11-29T08:58:56.058734Z",
     "shell.execute_reply": "2024-11-29T08:58:56.057289Z"
    },
    "papermill": {
     "duration": 0.092054,
     "end_time": "2024-11-29T08:58:56.060934",
     "exception": false,
     "start_time": "2024-11-29T08:58:55.968880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Income</th>\n",
       "      <th>Education</th>\n",
       "      <th>Marital Status</th>\n",
       "      <th>Number of Children</th>\n",
       "      <th>Home Ownership</th>\n",
       "      <th>Credit Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Female</td>\n",
       "      <td>50000</td>\n",
       "      <td>Bachelor's Degree</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Rented</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Male</td>\n",
       "      <td>100000</td>\n",
       "      <td>Master's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>2</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Female</td>\n",
       "      <td>75000</td>\n",
       "      <td>Doctorate</td>\n",
       "      <td>Married</td>\n",
       "      <td>1</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Male</td>\n",
       "      <td>125000</td>\n",
       "      <td>High School Diploma</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Female</td>\n",
       "      <td>100000</td>\n",
       "      <td>Bachelor's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>3</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Male</td>\n",
       "      <td>150000</td>\n",
       "      <td>Master's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Female</td>\n",
       "      <td>40000</td>\n",
       "      <td>Associate's Degree</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Rented</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Male</td>\n",
       "      <td>60000</td>\n",
       "      <td>Bachelor's Degree</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Rented</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Female</td>\n",
       "      <td>80000</td>\n",
       "      <td>Master's Degree</td>\n",
       "      <td>Married</td>\n",
       "      <td>2</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Male</td>\n",
       "      <td>105000</td>\n",
       "      <td>Doctorate</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Income            Education Marital Status  Number of Children  \\\n",
       "Age                                                                           \n",
       "25   Female   50000    Bachelor's Degree         Single                   0   \n",
       "30     Male  100000      Master's Degree        Married                   2   \n",
       "35   Female   75000            Doctorate        Married                   1   \n",
       "40     Male  125000  High School Diploma         Single                   0   \n",
       "45   Female  100000    Bachelor's Degree        Married                   3   \n",
       "50     Male  150000      Master's Degree        Married                   0   \n",
       "26   Female   40000   Associate's Degree         Single                   0   \n",
       "31     Male   60000    Bachelor's Degree         Single                   0   \n",
       "36   Female   80000      Master's Degree        Married                   2   \n",
       "41     Male  105000            Doctorate         Single                   0   \n",
       "\n",
       "    Home Ownership Credit Score  \n",
       "Age                              \n",
       "25          Rented         High  \n",
       "30           Owned         High  \n",
       "35           Owned         High  \n",
       "40           Owned         High  \n",
       "45           Owned         High  \n",
       "50           Owned         High  \n",
       "26          Rented      Average  \n",
       "31          Rented      Average  \n",
       "36           Owned         High  \n",
       "41           Owned         High  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Income</th>\n",
       "      <td>164.0</td>\n",
       "      <td>83765.243902</td>\n",
       "      <td>32457.306728</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>57500.0</td>\n",
       "      <td>83750.0</td>\n",
       "      <td>105000.0</td>\n",
       "      <td>162500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of Children</th>\n",
       "      <td>164.0</td>\n",
       "      <td>0.652439</td>\n",
       "      <td>0.883346</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    count          mean           std      min      25%  \\\n",
       "Income              164.0  83765.243902  32457.306728  25000.0  57500.0   \n",
       "Number of Children  164.0      0.652439      0.883346      0.0      0.0   \n",
       "\n",
       "                        50%       75%       max  \n",
       "Income              83750.0  105000.0  162500.0  \n",
       "Number of Children      0.0       1.0       3.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 164 entries, 25 to 49\n",
      "Data columns (total 7 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   Gender              164 non-null    object\n",
      " 1   Income              164 non-null    int64 \n",
      " 2   Education           164 non-null    object\n",
      " 3   Marital Status      164 non-null    object\n",
      " 4   Number of Children  164 non-null    int64 \n",
      " 5   Home Ownership      164 non-null    object\n",
      " 6   Credit Score        164 non-null    object\n",
      "dtypes: int64(2), object(5)\n",
      "memory usage: 10.2+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(164, 7)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/credit-score-classification-dataset/Credit Score Classification Dataset.csv\", index_col = 0)\n",
    "\n",
    "display(df.head(10))\n",
    "display(df.describe().T)\n",
    "display(df.info())\n",
    "display(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b73712eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:58:56.071061Z",
     "iopub.status.busy": "2024-11-29T08:58:56.070666Z",
     "iopub.status.idle": "2024-11-29T08:58:58.252353Z",
     "shell.execute_reply": "2024-11-29T08:58:58.251142Z"
    },
    "papermill": {
     "duration": 2.189524,
     "end_time": "2024-11-29T08:58:58.254646",
     "exception": false,
     "start_time": "2024-11-29T08:58:56.065122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Credit Score\n",
      "High       113\n",
      "Average     36\n",
      "Low         15\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Class distribution\n",
    "sns.countplot(x='Credit Score', data=df)\n",
    "plt.title(\"Class Distribution of Credit Score\")\n",
    "plt.show\n",
    "\n",
    "df_credit = df['Credit Score'].value_counts()\n",
    "print(df_credit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a59c4b87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:58:58.265509Z",
     "iopub.status.busy": "2024-11-29T08:58:58.264965Z",
     "iopub.status.idle": "2024-11-29T08:58:59.847823Z",
     "shell.execute_reply": "2024-11-29T08:58:59.846202Z"
    },
    "papermill": {
     "duration": 1.590888,
     "end_time": "2024-11-29T08:58:59.850082",
     "exception": false,
     "start_time": "2024-11-29T08:58:58.259194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Gender  Income  Education  Marital Status  Number of Children  \\\n",
      "Age                                                                  \n",
      "25        0   50000          1               1                   0   \n",
      "30        1  100000          4               0                   2   \n",
      "35        0   75000          2               0                   1   \n",
      "40        1  125000          3               1                   0   \n",
      "45        0  100000          1               0                   3   \n",
      "\n",
      "     Home Ownership  \n",
      "Age                  \n",
      "25                1  \n",
      "30                0  \n",
      "35                0  \n",
      "40                0  \n",
      "45                0  \n",
      "Cross-Validation Accuracy Scores: [1.         0.98529412 0.95588235 0.97058824 0.98507463]\n",
      "Mean Accuracy: 0.979367866549605\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.model_selection import KFold, cross_val_score\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Step 1: Encode categorical features\n",
    "categorical_cols = ['Gender', 'Education', 'Marital Status', 'Home Ownership', 'Credit Score']\n",
    "label_encoders = {}\n",
    "for col in categorical_cols:\n",
    "    le = LabelEncoder()\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "    label_encoders[col] = le  # Save encoders for reverse mapping later\n",
    "\n",
    "# Step 2: Features and target\n",
    "X = df.drop(columns=['Credit Score'])  # Features\n",
    "y = df['Credit Score']  # Target variable\n",
    "\n",
    "print(X.head())\n",
    "\n",
    "# Step 3: Apply SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "X_smote, y_smote = smote.fit_resample(X, y)\n",
    "\n",
    "# Step 4: Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_smote_scaled = scaler.fit_transform(X_smote)\n",
    "\n",
    "# Step 5: K-Fold Cross-Validation\n",
    "kf = KFold(n_splits=5, shuffle=True, random_state=42)  # 5 folds\n",
    "model = RandomForestClassifier(random_state=42)  # Example model\n",
    "\n",
    "# Perform cross-validation\n",
    "cv_scores = cross_val_score(model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "\n",
    "# Output results\n",
    "print(\"Cross-Validation Accuracy Scores:\", cv_scores)\n",
    "print(\"Mean Accuracy:\", cv_scores.mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f16bab82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:58:59.861239Z",
     "iopub.status.busy": "2024-11-29T08:58:59.860708Z",
     "iopub.status.idle": "2024-11-29T08:59:00.513050Z",
     "shell.execute_reply": "2024-11-29T08:59:00.512232Z"
    },
    "papermill": {
     "duration": 0.660956,
     "end_time": "2024-11-29T08:59:00.515761",
     "exception": false,
     "start_time": "2024-11-29T08:58:59.854805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline Accuracy Scores: [0.25       0.32352941 0.25       0.32352941 0.28358209]\n",
      "Mean Baseline Accuracy: 0.2861281826163301\n",
      "\n",
      "Logistic Regression Accuracy Scores: [1.         1.         0.95588235 0.98529412 0.97014925]\n",
      "Mean Logistic Regression Accuracy: 0.9822651448639158\n",
      "\n",
      "XGBClassifier Accuracy Scores: [1.         0.97058824 0.98529412 0.94117647 1.        ]\n",
      "Mean XGBClassifier Accuracy: 0.9794117647058824\n"
     ]
    }
   ],
   "source": [
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Step 1: Baseline Model\n",
    "baseline_model = DummyClassifier(strategy='most_frequent')  # Always predicts majority class\n",
    "baseline_scores = cross_val_score(baseline_model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Baseline Accuracy Scores:\", baseline_scores)\n",
    "print(\"Mean Baseline Accuracy:\", baseline_scores.mean())\n",
    "\n",
    "# Step 2: Logistic Regression Model\n",
    "logreg_model = LogisticRegression(random_state=42, max_iter=1000)\n",
    "logreg_scores = cross_val_score(logreg_model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "print(\"\\nLogistic Regression Accuracy Scores:\", logreg_scores)\n",
    "print(\"Mean Logistic Regression Accuracy:\", logreg_scores.mean())\n",
    "\n",
    "# Step 3: XGBClassifier Model\n",
    "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
    "xgb_scores = cross_val_score(xgb_model, X_smote_scaled, y_smote, cv=kf, scoring='accuracy')\n",
    "print(\"\\nXGBClassifier Accuracy Scores:\", xgb_scores)\n",
    "print(\"Mean XGBClassifier Accuracy:\", xgb_scores.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4a60e21f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:59:00.530087Z",
     "iopub.status.busy": "2024-11-29T08:59:00.529345Z",
     "iopub.status.idle": "2024-11-29T08:59:00.535895Z",
     "shell.execute_reply": "2024-11-29T08:59:00.534904Z"
    },
    "papermill": {
     "duration": 0.016735,
     "end_time": "2024-11-29T08:59:00.538569",
     "exception": false,
     "start_time": "2024-11-29T08:59:00.521834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender\n",
      "0    86\n",
      "1    78\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of the 'Gender' column\n",
    "gender_counts = df['Gender'].value_counts()\n",
    "print(gender_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c9fb0d8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:59:00.550387Z",
     "iopub.status.busy": "2024-11-29T08:59:00.549995Z",
     "iopub.status.idle": "2024-11-29T08:59:02.124278Z",
     "shell.execute_reply": "2024-11-29T08:59:02.123139Z"
    },
    "papermill": {
     "duration": 1.583187,
     "end_time": "2024-11-29T08:59:02.126629",
     "exception": false,
     "start_time": "2024-11-29T08:59:00.543442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Male Group Accuracy Scores: [1. 1. 1. 1. 1.]\n",
      "Mean Male Group Accuracy: 1.0\n",
      "Female Group Accuracy Scores: [1.         1.         0.94117647 0.93939394 0.96969697]\n",
      "Mean Female Group Accuracy: 0.9700534759358289\n"
     ]
    }
   ],
   "source": [
    "# Split the data by gender and evaluate performance separately\n",
    "df_male = df[df['Gender'] == 1]  # '0' corresponds to male\n",
    "df_female = df[df['Gender'] == 0]  # '1' corresponds to female\n",
    "\n",
    "# Evaluate performance for each group\n",
    "X_male = df_male.drop(columns=['Credit Score', 'Gender'])\n",
    "y_male = df_male['Credit Score']\n",
    "\n",
    "X_female = df_female.drop(columns=['Credit Score', 'Gender'])\n",
    "y_female = df_female['Credit Score']\n",
    "\n",
    "# Apply SMOTE to balance the data for each gender group\n",
    "X_male_smote, y_male_smote = smote.fit_resample(X_male, y_male)\n",
    "X_female_smote, y_female_smote = smote.fit_resample(X_female, y_female)\n",
    "\n",
    "# Standardize features\n",
    "X_male_smote_scaled = scaler.fit_transform(X_male_smote)\n",
    "X_female_smote_scaled = scaler.fit_transform(X_female_smote)\n",
    "\n",
    "# Cross-validation for male group\n",
    "male_scores = cross_val_score(model, X_male_smote_scaled, y_male_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Male Group Accuracy Scores:\", male_scores)\n",
    "print(\"Mean Male Group Accuracy:\", male_scores.mean())\n",
    "\n",
    "# Cross-validation for female group\n",
    "female_scores = cross_val_score(model, X_female_smote_scaled, y_female_smote, cv=kf, scoring='accuracy')\n",
    "print(\"Female Group Accuracy Scores:\", female_scores)\n",
    "print(\"Mean Female Group Accuracy:\", female_scores.mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d0f73c6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:59:02.139295Z",
     "iopub.status.busy": "2024-11-29T08:59:02.138161Z",
     "iopub.status.idle": "2024-11-29T08:59:02.170784Z",
     "shell.execute_reply": "2024-11-29T08:59:02.169486Z"
    },
    "papermill": {
     "duration": 0.041361,
     "end_time": "2024-11-29T08:59:02.173093",
     "exception": false,
     "start_time": "2024-11-29T08:59:02.131732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Male Group Accuracy: 0.9912280701754386, F1-Score: 0.9912273951519815\n",
      "Confusion Matrix for Male Group:\n",
      " [[57  0]\n",
      " [ 1 56]]\n",
      "Female Group Accuracy: 0.9761904761904762, F1-Score: 0.9761828814460394\n",
      "Confusion Matrix for Female Group:\n",
      " [[53  3  0]\n",
      " [ 1 55  0]\n",
      " [ 0  0 56]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score, confusion_matrix, accuracy_score\n",
    "\n",
    "# Function to evaluate model metrics including F1-score\n",
    "def evaluate_model_metrics(X, y, model):\n",
    "    # Ensure y is a 1D array, in case it's one-hot encoded or in other format\n",
    "    if y.ndim > 1:\n",
    "        y = np.argmax(y, axis=1)  # Convert one-hot to class labels\n",
    "    \n",
    "    model.fit(X, y)  # Fit the model to the given data\n",
    "    y_pred = model.predict(X)\n",
    "    \n",
    "    accuracy = accuracy_score(y, y_pred)\n",
    "    f1 = f1_score(y, y_pred, average='weighted')\n",
    "    conf_matrix = confusion_matrix(y, y_pred)\n",
    "    \n",
    "    return accuracy, f1, conf_matrix\n",
    "\n",
    "# Evaluate metrics for the male group\n",
    "accuracy_male, f1_male, conf_matrix_male = evaluate_model_metrics(X_male_smote_scaled, y_male_smote, logreg_model)\n",
    "print(f\"Male Group Accuracy: {accuracy_male}, F1-Score: {f1_male}\")\n",
    "print(\"Confusion Matrix for Male Group:\\n\", conf_matrix_male)\n",
    "\n",
    "# Evaluate metrics for the female group\n",
    "accuracy_female, f1_female, conf_matrix_female = evaluate_model_metrics(X_female_smote_scaled, y_female_smote, logreg_model)\n",
    "print(f\"Female Group Accuracy: {accuracy_female}, F1-Score: {f1_female}\")\n",
    "print(\"Confusion Matrix for Female Group:\\n\", conf_matrix_female)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "346e2bf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:59:02.185797Z",
     "iopub.status.busy": "2024-11-29T08:59:02.185360Z",
     "iopub.status.idle": "2024-11-29T08:59:02.196167Z",
     "shell.execute_reply": "2024-11-29T08:59:02.195016Z"
    },
    "papermill": {
     "duration": 0.020464,
     "end_time": "2024-11-29T08:59:02.198640",
     "exception": false,
     "start_time": "2024-11-29T08:59:02.178176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def calculate_bias_metrics(model, X, y, sensitive_attribute, groups):\n",
    "    \"\"\"\n",
    "    Calculate bias metrics for a model based on a sensitive attribute.\n",
    "    \n",
    "    Args:\n",
    "        model: The machine learning model to evaluate.\n",
    "        X: Features (numpy array or DataFrame).\n",
    "        y: Target labels (numpy array or Series).\n",
    "        sensitive_attribute: Name of the sensitive attribute (string).\n",
    "        groups: List of values in the sensitive attribute (e.g., [0, 1] for Gender).\n",
    "\n",
    "    Returns:\n",
    "        A dictionary containing bias metrics.\n",
    "    \"\"\"\n",
    "    bias_metrics = {}\n",
    "    overall_metrics = {}\n",
    "    \n",
    "    # Train and evaluate the model on the entire dataset\n",
    "    model.fit(X, y)\n",
    "    y_pred = model.predict(X)\n",
    "    overall_accuracy = accuracy_score(y, y_pred)\n",
    "    overall_f1 = f1_score(y, y_pred, average='weighted')\n",
    "    overall_metrics[\"accuracy\"] = overall_accuracy\n",
    "    overall_metrics[\"f1_score\"] = overall_f1\n",
    "    \n",
    "    bias_metrics[\"overall\"] = overall_metrics\n",
    "    \n",
    "    # Calculate metrics for each group\n",
    "    group_metrics = {}\n",
    "    for group in groups:\n",
    "        # Filter data for the current group\n",
    "        group_indices = (X[sensitive_attribute] == group)\n",
    "        X_group = X[group_indices].drop(columns=[sensitive_attribute])\n",
    "        y_group = y[group_indices]\n",
    "        \n",
    "        # Train and evaluate on the group's data\n",
    "        model.fit(X_group, y_group)\n",
    "        y_group_pred = model.predict(X_group)\n",
    "        accuracy = accuracy_score(y_group, y_group_pred)\n",
    "        f1 = f1_score(y_group, y_group_pred, average='weighted')\n",
    "        \n",
    "        group_metrics[group] = {\n",
    "            \"accuracy\": accuracy,\n",
    "            \"f1_score\": f1\n",
    "        }\n",
    "    \n",
    "    bias_metrics[\"group_metrics\"] = group_metrics\n",
    "    \n",
    "    # Calculate bias scores\n",
    "    group_0 = group_metrics[groups[0]]\n",
    "    group_1 = group_metrics[groups[1]]\n",
    "    \n",
    "    bias_metrics[\"bias_score\"] = {\n",
    "        \"accuracy_diff\": abs(group_0[\"accuracy\"] - group_1[\"accuracy\"]),\n",
    "        \"f1_score_diff\": abs(group_0[\"f1_score\"] - group_1[\"f1_score\"]),\n",
    "        \"accuracy_ratio\": min(group_0[\"accuracy\"], group_1[\"accuracy\"]) / max(group_0[\"accuracy\"], group_1[\"accuracy\"]),\n",
    "        \"f1_score_ratio\": min(group_0[\"f1_score\"], group_1[\"f1_score\"]) / max(group_0[\"f1_score\"], group_1[\"f1_score\"]),\n",
    "    }\n",
    "    \n",
    "    return bias_metrics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b33c7866",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:59:02.210705Z",
     "iopub.status.busy": "2024-11-29T08:59:02.210196Z",
     "iopub.status.idle": "2024-11-29T08:59:02.248170Z",
     "shell.execute_reply": "2024-11-29T08:59:02.247100Z"
    },
    "papermill": {
     "duration": 0.04676,
     "end_time": "2024-11-29T08:59:02.250556",
     "exception": false,
     "start_time": "2024-11-29T08:59:02.203796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'overall': {'accuracy': 0.6890243902439024, 'f1_score': 0.5621643039535088}, 'group_metrics': {0: {'accuracy': 0.6511627906976745, 'f1_score': 0.5135931870291517}, 1: {'accuracy': 0.7307692307692307, 'f1_score': 0.617094017094017}}, 'bias_score': {'accuracy_diff': 0.07960644007155626, 'f1_score_diff': 0.10350083006486532, 'accuracy_ratio': 0.8910648714810283, 'f1_score_ratio': 0.832277048232836}}\n"
     ]
    }
   ],
   "source": [
    "# Sensitive attribute: 'Gender' (0=female, 1=male)\n",
    "sensitive_attribute = 'Gender'\n",
    "groups = [0, 1]\n",
    "\n",
    "bias_metrics = calculate_bias_metrics(\n",
    "    model=logreg_model,\n",
    "    X=df.drop(columns=['Credit Score']), \n",
    "    y=df['Credit Score'], \n",
    "    sensitive_attribute=sensitive_attribute, \n",
    "    groups=groups\n",
    ")\n",
    "\n",
    "print(bias_metrics)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0f9e48a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-29T08:59:02.262737Z",
     "iopub.status.busy": "2024-11-29T08:59:02.262335Z",
     "iopub.status.idle": "2024-11-29T08:59:03.196786Z",
     "shell.execute_reply": "2024-11-29T08:59:03.195657Z"
    },
    "papermill": {
     "duration": 0.943298,
     "end_time": "2024-11-29T08:59:03.199030",
     "exception": false,
     "start_time": "2024-11-29T08:59:02.255732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Extract the relevant data from bias_metrics\n",
    "overall_accuracy = bias_metrics['overall']['accuracy']\n",
    "overall_f1 = bias_metrics['overall']['f1_score']\n",
    "group_0_accuracy = bias_metrics['group_metrics'][0]['accuracy']\n",
    "group_0_f1 = bias_metrics['group_metrics'][0]['f1_score']\n",
    "group_1_accuracy = bias_metrics['group_metrics'][1]['accuracy']\n",
    "group_1_f1 = bias_metrics['group_metrics'][1]['f1_score']\n",
    "\n",
    "# Bias scores\n",
    "accuracy_diff = bias_metrics['bias_score']['accuracy_diff']\n",
    "f1_diff = bias_metrics['bias_score']['f1_score_diff']\n",
    "accuracy_ratio = bias_metrics['bias_score']['accuracy_ratio']\n",
    "f1_ratio = bias_metrics['bias_score']['f1_score_ratio']\n",
    "\n",
    "# Create subplots\n",
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "# Plot for Accuracy and F1-Score comparison\n",
    "labels = ['Overall', 'Group 0 (Male)', 'Group 1 (Female)']\n",
    "accuracy_values = [overall_accuracy, group_0_accuracy, group_1_accuracy]\n",
    "f1_values = [overall_f1, group_0_f1, group_1_f1]\n",
    "\n",
    "# Plot Accuracy\n",
    "axes[0].bar(labels, accuracy_values, color=['blue', 'orange', 'green'])\n",
    "axes[0].set_title('Accuracy Comparison')\n",
    "axes[0].set_ylabel('Accuracy')\n",
    "\n",
    "# Plot F1-Score\n",
    "axes[1].bar(labels, f1_values, color=['blue', 'orange', 'green'])\n",
    "axes[1].set_title('F1-Score Comparison')\n",
    "axes[1].set_ylabel('F1-Score')\n",
    "\n",
    "# Show the plot\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plot Bias Metrics\n",
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6))\n",
    "\n",
    "# Plot Accuracy Bias Scores\n",
    "axes[0].bar(['Accuracy Diff', 'Accuracy Ratio'], [accuracy_diff, accuracy_ratio], color=['red', 'purple'])\n",
    "axes[0].set_title('Accuracy Bias Metrics')\n",
    "axes[0].set_ylabel('Value')\n",
    "\n",
    "# Plot F1 Bias Scores\n",
    "axes[1].bar(['F1 Diff', 'F1 Ratio'], [f1_diff, f1_ratio], color=['red', 'purple'])\n",
    "axes[1].set_title('F1 Bias Metrics')\n",
    "axes[1].set_ylabel('Value')\n",
    "\n",
    "# Show the plot\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c1c5c69",
   "metadata": {
    "papermill": {
     "duration": 0.005753,
     "end_time": "2024-11-29T08:59:03.210805",
     "exception": false,
     "start_time": "2024-11-29T08:59:03.205052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3304781,
     "sourceId": 5744842,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.893706,
   "end_time": "2024-11-29T08:59:03.939123",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-29T08:58:52.045417",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
